--- tbb-latest-org/include/tbb/parallel_sort.h	2013-05-30 12:06:21.504915430 +0200
+++ tbb-latest/include/tbb/parallel_sort.h	2013-05-30 12:33:36.683659617 +0200
@@ -153,7 +153,11 @@
 //! Wrapper method to initiate the sort by calling parallel_for.
 /** @ingroup algorithms */
 template<typename RandomAccessIterator, typename Compare>
-void parallel_quick_sort( RandomAccessIterator begin, RandomAccessIterator end, const Compare& comp ) {
+void parallel_quick_sort( RandomAccessIterator begin, RandomAccessIterator end, const Compare& comp
+#if __TBB_TASK_GROUP_CONTEXT
+	, tbb::task_group_context& ctxt
+#endif
+	) {
 #if __TBB_TASK_GROUP_CONTEXT
     task_group_context my_context;
     const int serial_cutoff = 9;
@@ -171,12 +175,17 @@
                   auto_partitioner(),
                   my_context);
 
-    if (my_context.is_group_execution_cancelled())
+    if (my_context.is_group_execution_cancelled() && !ctxt.is_group_execution_cancelled())
 do_parallel_quick_sort:
-#endif /* __TBB_TASK_GROUP_CONTEXT */
+        parallel_for( quick_sort_range<RandomAccessIterator,Compare>(begin, end-begin, comp ), 
+                      quick_sort_body<RandomAccessIterator,Compare>(),
+                      auto_partitioner(),
+					  ctxt);
+#else
         parallel_for( quick_sort_range<RandomAccessIterator,Compare>(begin, end-begin, comp ), 
                       quick_sort_body<RandomAccessIterator,Compare>(),
                       auto_partitioner() );
+#endif /* __TBB_TASK_GROUP_CONTEXT */
 }
 
 } // namespace internal
@@ -198,13 +207,25 @@
     The compare object must define a bool operator() function.
     @ingroup algorithms **/
 template<typename RandomAccessIterator, typename Compare>
-void parallel_sort( RandomAccessIterator begin, RandomAccessIterator end, const Compare& comp) { 
+void parallel_sort( RandomAccessIterator begin, RandomAccessIterator end, const Compare& comp
+#if __TBB_TASK_GROUP_CONTEXT
+	, tbb::task_group_context* ctxt = nullptr
+#endif
+	) {
     const int min_parallel_size = 500; 
     if( end > begin ) {
         if (end - begin < min_parallel_size) { 
             std::sort(begin, end, comp);
         } else {
+#if __TBB_TASK_GROUP_CONTEXT
+			tbb::task_group_context my_ctxt;
+			if (ctxt == nullptr) {
+				ctxt = &my_ctxt;
+			}
+            internal::parallel_quick_sort(begin, end, comp, *ctxt);
+#else
             internal::parallel_quick_sort(begin, end, comp);
+#endif
         }
     }
 }
@@ -212,15 +233,23 @@
 //! Sorts the data in [begin,end) with a default comparator \c std::less<RandomAccessIterator>
 /** @ingroup algorithms **/
 template<typename RandomAccessIterator>
-inline void parallel_sort( RandomAccessIterator begin, RandomAccessIterator end ) { 
-    parallel_sort( begin, end, std::less< typename std::iterator_traits<RandomAccessIterator>::value_type >() );
+inline void parallel_sort( RandomAccessIterator begin, RandomAccessIterator end
+#if __TBB_TASK_GROUP_CONTEXT
+	, tbb::task_group_context* ctxt = nullptr
+#endif
+	) {
+    parallel_sort( begin, end, std::less< typename std::iterator_traits<RandomAccessIterator>::value_type >(), ctxt );
 }
 
 //! Sorts the data in the range \c [begin,end) with a default comparator \c std::less<T>
 /** @ingroup algorithms **/
 template<typename T>
-inline void parallel_sort( T * begin, T * end ) {
-    parallel_sort( begin, end, std::less< T >() );
+inline void parallel_sort( T * begin, T * end
+#if __TBB_TASK_GROUP_CONTEXT
+	, tbb::task_group_context* ctxt = nullptr
+#endif
+	) {
+    parallel_sort( begin, end, std::less< T >(), ctxt );
 }   
 //@}
 
