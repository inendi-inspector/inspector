diff --git a/src/gui/itemviews/qheaderview.cpp b/src/gui/itemviews/qheaderview.cpp
index 47d55fa..c374921 100644
--- a/src/gui/itemviews/qheaderview.cpp
+++ b/src/gui/itemviews/qheaderview.cpp
@@ -435,12 +435,17 @@ Qt::Orientation QHeaderView::orientation() const
     \sa setOffset()
 */
 
-int QHeaderView::offset() const
+qint64 QHeaderView::offset() const
 {
     Q_D(const QHeaderView);
     return d->offset;
 }
 
+void QHeaderView::setOffset(int newOffset)
+{
+	setOffset((qint64) newOffset);
+}
+
 /*!
     \fn void QHeaderView::setOffset(int offset)
 
@@ -449,12 +454,12 @@ int QHeaderView::offset() const
     \sa offset(), length()
 */
 
-void QHeaderView::setOffset(int newOffset)
+void QHeaderView::setOffset(qint64 newOffset)
 {
     Q_D(QHeaderView);
-    if (d->offset == (int)newOffset)
+    if (d->offset == newOffset)
         return;
-    int ndelta = d->offset - newOffset;
+    qint64 ndelta = d->offset - newOffset;
     d->offset = newOffset;
     if (d->orientation == Qt::Horizontal)
         d->viewport->scroll(isRightToLeft() ? -ndelta : ndelta, 0);
@@ -481,7 +486,7 @@ void QHeaderView::setOffsetToSectionPosition(int visualIndex)
 {
     Q_D(QHeaderView);
     if (visualIndex > -1 && visualIndex < d->sectionCount) {
-        int position = d->headerSectionPosition(d->adjustedVisualIndex(visualIndex));
+        qint64 position = d->headerSectionPosition(d->adjustedVisualIndex(visualIndex));
         setOffset(position);
     }
 }
@@ -495,8 +500,8 @@ void QHeaderView::setOffsetToSectionPosition(int visualIndex)
 void QHeaderView::setOffsetToLastSection()
 {
     Q_D(const QHeaderView);
-    int size = (d->orientation == Qt::Horizontal ? viewport()->width() : viewport()->height());
-    int position = length() - size;
+    qint64 size = (d->orientation == Qt::Horizontal ? viewport()->width() : viewport()->height());
+    qint64 position = length() - size;
     setOffset(position);
 }
 
@@ -506,7 +511,7 @@ void QHeaderView::setOffsetToLastSection()
     \sa sizeHint(), setResizeMode(), offset()
 */
 
-int QHeaderView::length() const
+qint64 QHeaderView::length() const
 {
     Q_D(const QHeaderView);
     d->executePostedLayout();
@@ -574,6 +579,11 @@ int QHeaderView::sectionSizeHint(int logicalIndex) const
     return qMax(minimumSectionSize(), hint);
 }
 
+int QHeaderView::visualIndexAt(int position) const
+{
+	return visualIndexAt((qint64) position);
+}
+
 /*!
     Returns the visual index of the section that covers the given \a position
     in the viewport.
@@ -581,10 +591,10 @@ int QHeaderView::sectionSizeHint(int logicalIndex) const
     \sa logicalIndexAt()
 */
 
-int QHeaderView::visualIndexAt(int position) const
+int QHeaderView::visualIndexAt(qint64 position) const
 {
     Q_D(const QHeaderView);
-    int vposition = position;
+    qint64 vposition = position;
     d->executePostedLayout();
     d->executePostedResize();
     const int count = d->sectionCount;
@@ -655,7 +665,7 @@ int QHeaderView::sectionSize(int logicalIndex) const
     \sa sectionViewportPosition()
 */
 
-int QHeaderView::sectionPosition(int logicalIndex) const
+qint64 QHeaderView::sectionPosition(int logicalIndex) const
 {
     Q_D(const QHeaderView);
     int visual = visualIndex(logicalIndex);
@@ -675,17 +685,17 @@ int QHeaderView::sectionPosition(int logicalIndex) const
     \sa sectionPosition(), isSectionHidden()
 */
 
-int QHeaderView::sectionViewportPosition(int logicalIndex) const
+qint64 QHeaderView::sectionViewportPosition(int logicalIndex) const
 {
     Q_D(const QHeaderView);
     if (logicalIndex >= count())
         return -1;
-    int position = sectionPosition(logicalIndex);
+    qint64 position = sectionPosition(logicalIndex);
     if (position < 0)
         return position; // the section was hidden
-    int offsetPosition = position - d->offset;
+    qint64 offsetPosition = position - d->offset;
     if (d->reverse())
-        return d->viewport->width() - (offsetPosition + sectionSize(logicalIndex));
+        return (qint64) (d->viewport->width()) - (offsetPosition + (qint64) sectionSize(logicalIndex));
     return offsetPosition;
 }
 
@@ -1590,8 +1600,8 @@ void QHeaderView::headerDataChanged(Qt::Orientation orientation, int logicalFirs
     }
 
     d->executePostedResize();
-    const int first = d->headerSectionPosition(firstVisualIndex),
-              last = d->headerSectionPosition(lastVisualIndex)
+    const qint64 first = d->headerSectionPosition(firstVisualIndex),
+                 last = d->headerSectionPosition(lastVisualIndex)
                         + d->headerSectionSize(lastVisualIndex);
 
     if (orientation == Qt::Horizontal) {
@@ -1659,20 +1669,20 @@ void QHeaderView::sectionsInserted(const QModelIndex &parent,
     d->sectionCount += insertCount;
 
     if (d->sectionSpans.isEmpty() || insertAt >= d->sectionSpans.count()) {
-        int insertLength = d->defaultSectionSize * insertCount;
+        qint64 insertLength = (qint64) d->defaultSectionSize * (qint64) insertCount;
         d->length += insertLength;
         QHeaderViewPrivate::SectionSpan span(insertLength, insertCount, d->globalResizeMode);
         d->sectionSpans.append(span);
     } else if ((d->sectionSpans.at(insertAt).sectionSize() == d->defaultSectionSize)
                && d->sectionSpans.at(insertAt).resizeMode == d->globalResizeMode) {
         // add the new sections to an existing span
-        int insertLength = d->sectionSpans.at(insertAt).sectionSize() * insertCount;
+        qint64 insertLength = (qint64) (d->sectionSpans.at(insertAt).sectionSize()) * (qint64) (insertCount);
         d->length += insertLength;
         d->sectionSpans[insertAt].size += insertLength;
         d->sectionSpans[insertAt].count += insertCount;
     } else {
         // separate them out into their own span
-        int insertLength = d->defaultSectionSize * insertCount;
+        qint64 insertLength = (qint64) d->defaultSectionSize * (qint64) insertCount;
         d->length += insertLength;
         QHeaderViewPrivate::SectionSpan span(insertLength, insertCount, d->globalResizeMode);
         d->sectionSpans.insert(insertAt, span);
@@ -1982,7 +1992,7 @@ void QHeaderView::initializeSections(int start, int end)
         d->sectionHidden.resize(d->sectionCount);
 
     if (d->sectionCount > oldCount)
-        d->createSectionSpan(start, end, (end - start + 1) * d->defaultSectionSize, d->globalResizeMode);
+        d->createSectionSpan(start, end, (qint64)(end - start + 1) * (qint64) d->defaultSectionSize, d->globalResizeMode);
     //Q_ASSERT(d->headerLength() == d->length);
 
     if (d->sectionCount != oldCount)
@@ -2209,7 +2219,7 @@ void QHeaderView::mousePressEvent(QMouseEvent *e)
 void QHeaderView::mouseMoveEvent(QMouseEvent *e)
 {
     Q_D(QHeaderView);
-    int pos = d->orientation == Qt::Horizontal ? e->x() : e->y();
+    qint64 pos = d->orientation == Qt::Horizontal ? e->x() : e->y();
     if (pos < 0)
         return;
     if (e->buttons() == Qt::NoButton) {
@@ -2243,7 +2253,7 @@ void QHeaderView::mouseMoveEvent(QMouseEvent *e)
                 int visual = visualIndexAt(pos);
                 if (visual == -1)
                     return;
-                int posThreshold = d->headerSectionPosition(visual) - d->offset + d->headerSectionSize(visual) / 2;
+                qint64 posThreshold = d->headerSectionPosition(visual) - d->offset + d->headerSectionSize(visual) / 2;
                 int moving = visualIndex(d->section);
                 if (visual < moving) {
                     if (pos < posThreshold)
@@ -3081,7 +3091,7 @@ void QHeaderViewPrivate::resizeSections(QHeaderView::ResizeMode globalMode, bool
         //Q_ASSERT(newSectionLength > 0);
         if ((previousSectionResizeMode != newSectionResizeMode
             || previousSectionLength != newSectionLength) && i > 0) {
-            int spanLength = (i - spanStartSection) * previousSectionLength;
+            qint64 spanLength = (qint64) (i - spanStartSection) * (qint64) previousSectionLength;
             createSectionSpan(spanStartSection, i - 1, spanLength, previousSectionResizeMode);
             //Q_ASSERT(headerLength() == length);
             spanStartSection = i;
@@ -3095,14 +3105,14 @@ void QHeaderViewPrivate::resizeSections(QHeaderView::ResizeMode globalMode, bool
     }
 
     createSectionSpan(spanStartSection, sectionCount - 1,
-                      (sectionCount - spanStartSection) * previousSectionLength,
+                      (qint64) (sectionCount - spanStartSection) * (qint64) previousSectionLength,
                       previousSectionResizeMode);
     //Q_ASSERT(headerLength() == length);
     resizeRecursionBlock = false;
     viewport->update();
 }
 
-void QHeaderViewPrivate::createSectionSpan(int start, int end, int size, QHeaderView::ResizeMode mode)
+void QHeaderViewPrivate::createSectionSpan(qint64 start, qint64 end, qint64 size, QHeaderView::ResizeMode mode)
 {
     // ### the code for merging spans does not merge at all opertuneties
     // ### what if the number of sections is reduced ?
@@ -3148,7 +3158,7 @@ void QHeaderViewPrivate::createSectionSpan(int start, int end, int size, QHeader
             QHeaderView::ResizeMode span_mode = sectionSpans.at(i).resizeMode;
             // first span
             int first_span_count = start - start_section;
-            int first_span_size = section_size * first_span_count;
+            qint64 first_span_size = (qint64) (section_size) * (qint64) (first_span_count);
             sectionSpans[i].count = first_span_count;
             sectionSpans[i].size = first_span_size;
             sectionSpans[i].resizeMode = span_mode;
@@ -3157,12 +3167,12 @@ void QHeaderViewPrivate::createSectionSpan(int start, int end, int size, QHeader
 #ifndef QT_NO_DEBUG
             int mid_span_count = span.count;
 #endif
-            int mid_span_size = span.size;
+            qint64 mid_span_size = span.size;
             sectionSpans.insert(i + 1, span);
             length += mid_span_size;
             // last span
             int last_span_count = end_section - end;
-            int last_span_size = section_size * last_span_count;
+            qint64 last_span_size = (qint64) (section_size) * (qint64) (last_span_count);
             sectionSpans.insert(i + 2, SectionSpan(last_span_size, last_span_count, span_mode));
             length += last_span_size;
             Q_ASSERT(span_count == first_span_count + mid_span_count + last_span_count);
@@ -3175,7 +3185,7 @@ void QHeaderViewPrivate::createSectionSpan(int start, int end, int size, QHeader
             int removed_count = (end_section - start + 1);
             int span_count = sectionSpans.at(i).count - removed_count;
             int section_size = sectionSpans.at(i).sectionSize();
-            int span_size = section_size * span_count;
+            qint64 span_size = (qint64) section_size * (qint64) span_count;
             sectionSpans[i].count = span_count;
             sectionSpans[i].size = span_size;
             length += span_size;
@@ -3192,7 +3202,7 @@ void QHeaderViewPrivate::createSectionSpan(int start, int end, int size, QHeader
             int removed_count = (end - start_section + 1);
             int section_size = sectionSpans.at(i).sectionSize();
             int span_count = sectionSpans.at(i).count - removed_count;
-            int span_size = section_size * span_count;
+            qint64 span_size = (qint64) section_size * (qint64) span_count;
             sectionSpans[i].count = span_count;
             sectionSpans[i].size = span_size;
             length += span_size;
@@ -3229,7 +3239,7 @@ void QHeaderViewPrivate::createSectionSpan(int start, int end, int size, QHeader
     }
 }
 
-void QHeaderViewPrivate::removeSectionsFromSpans(int start, int end)
+void QHeaderViewPrivate::removeSectionsFromSpans(qint64 start, qint64 end)
 {
     // remove sections
     int start_section = 0;
@@ -3248,7 +3258,7 @@ void QHeaderViewPrivate::removeSectionsFromSpans(int start, int end)
             int change = (end - start + 1);
             sectionSpans[i].count -= change;
             sectionSpans[i].size = section_size * sectionSpans.at(i).count;
-            length -= (change * section_size);
+            length -= ((qint64) change * (qint64) section_size);
             break;
         } else if (start >= start_section && start <= end_section) {
             // the some of the removed sections are inside the span,at the end
@@ -3256,14 +3266,14 @@ void QHeaderViewPrivate::removeSectionsFromSpans(int start, int end)
             sectionSpans[i].count -= change;
             sectionSpans[i].size = section_size * sectionSpans.at(i).count;
             start += change;
-            length -= (change * section_size);
+            length -= ((qint64) change * (qint64) section_size);
             // the change affects several spans
         } else if (end >= start_section && end <= end_section) {
             // the some of the removed sections are inside the span, at the beginning
             int change = qMin((end - start_section + 1), end - start + 1);
             sectionSpans[i].count -= change;
             sectionSpans[i].size = section_size * sectionSpans.at(i).count;
-            length -= (change * section_size);
+            length -= ((qint64) change * (qint64) section_size);
             break;
         }
         start_section += section_count;
@@ -3425,7 +3435,7 @@ void QHeaderViewPrivate::setDefaultSectionSize(int size)
         QHeaderViewPrivate::SectionSpan &span = sectionSpans[i];
         if (span.size > 0) {
             //we resize it if it is not hidden (ie size > 0)
-            const int newSize = span.count * size;
+            const qint64 newSize = (qint64) (span.count) * (qint64) (size);
             if (newSize != span.size) {
                 length += newSize - span.size; //the whole length is changed
                 const int oldSectionSize = span.sectionSize();
@@ -3439,7 +3449,7 @@ void QHeaderViewPrivate::setDefaultSectionSize(int size)
     }
 }
 
-void QHeaderViewPrivate::resizeSectionSpan(int visualIndex, int oldSize, int newSize)
+void QHeaderViewPrivate::resizeSectionSpan(qint64 visualIndex, qint64 oldSize, qint64 newSize)
 {
     Q_Q(QHeaderView);
     QHeaderView::ResizeMode mode = headerSectionResizeMode(visualIndex);
@@ -3462,38 +3472,38 @@ int QHeaderViewPrivate::headerSectionSize(int visual) const
     return -1;
 }
 
-int QHeaderViewPrivate::headerSectionPosition(int visual) const
+qint64 QHeaderViewPrivate::headerSectionPosition(int visual) const
 {
     // ### stupid iteration
     int section_start = 0;
-    int span_position = 0;
+    qint64 span_position = 0;
     const int sectionSpansCount = sectionSpans.count();
     for (int i = 0; i < sectionSpansCount; ++i) {
         const QHeaderViewPrivate::SectionSpan &currentSection = sectionSpans.at(i);
         int section_end = section_start + currentSection.count - 1;
         if (visual >= section_start && visual <= section_end)
-            return span_position + (visual - section_start) * currentSection.sectionSize();
+            return span_position + (qint64) (visual - section_start) * (qint64) currentSection.sectionSize();
         section_start = section_end + 1;
         span_position += currentSection.size;
     }
     return -1;
 }
 
-int QHeaderViewPrivate::headerVisualIndexAt(int position) const
+int QHeaderViewPrivate::headerVisualIndexAt(qint64 position) const
 {
     // ### stupid iteration
     int span_start_section = 0;
-    int span_position = 0;
+    qint64 span_position = 0;
     const int sectionSpansCount = sectionSpans.count();
     for (int i = 0; i < sectionSpansCount; ++i) {
         const QHeaderViewPrivate::SectionSpan &currentSection = sectionSpans.at(i);
         int next_span_start_section = span_start_section + currentSection.count;
-        int next_span_position = span_position + currentSection.size;
+        qint64 next_span_position = span_position + currentSection.size;
         if (position == span_position && currentSection.size > 0)
             return span_start_section;
         if (position > span_position && position < next_span_position) {
-            int position_in_span = position - span_position;
-            return span_start_section + (position_in_span / currentSection.sectionSize());
+            qint64 position_in_span = position - span_position;
+            return (int) ((qint64) span_start_section + (position_in_span / currentSection.sectionSize()));
         }
         span_start_section = next_span_start_section;
         span_position = next_span_position;
diff --git a/src/gui/itemviews/qheaderview.h b/src/gui/itemviews/qheaderview.h
index 8f55d5b..473651c 100644
--- a/src/gui/itemviews/qheaderview.h
+++ b/src/gui/itemviews/qheaderview.h
@@ -84,20 +84,21 @@ public:
     void setModel(QAbstractItemModel *model);
 
     Qt::Orientation orientation() const;
-    int offset() const;
-    int length() const;
+    qint64 offset() const;
+    qint64 length() const;
     QSize sizeHint() const;
     int sectionSizeHint(int logicalIndex) const;
 
     int visualIndexAt(int position) const;
+    int visualIndexAt(qint64 position) const;
     int logicalIndexAt(int position) const;
 
     inline int logicalIndexAt(int x, int y) const;
     inline int logicalIndexAt(const QPoint &pos) const;
 
     int sectionSize(int logicalIndex) const;
-    int sectionPosition(int logicalIndex) const;
-    int sectionViewportPosition(int logicalIndex) const;
+    qint64 sectionPosition(int logicalIndex) const;
+    qint64 sectionViewportPosition(int logicalIndex) const;
 
     void moveSection(int from, int to);
     void swapSections(int first, int second);
@@ -164,6 +165,7 @@ public:
 
 public Q_SLOTS:
     void setOffset(int offset);
+    void setOffset(qint64 offset);
     void setOffsetToSectionPosition(int visualIndex);
     void setOffsetToLastSection();
     void headerDataChanged(Qt::Orientation orientation, int logicalFirst, int logicalLast);
diff --git a/src/gui/itemviews/qheaderview_p.h b/src/gui/itemviews/qheaderview_p.h
index 2555c40..feec02f 100644
--- a/src/gui/itemviews/qheaderview_p.h
+++ b/src/gui/itemviews/qheaderview_p.h
@@ -237,7 +237,7 @@ public:
 
     enum State { NoState, ResizeSection, MoveSection, SelectSections, NoClear } state;
 
-    int offset;
+    qint64 offset;
     Qt::Orientation orientation;
     Qt::SortOrder sortIndicatorOrder;
     int sortIndicatorSection;
@@ -263,7 +263,7 @@ public:
     int pressed;
     int hover;
 
-    int length;
+    qint64 length;
     int sectionCount;
     bool movableSections;
     bool clickableSections;
@@ -285,13 +285,13 @@ public:
     // header section spans
 
     struct SectionSpan {
-        int size;
-        int count;
+        qint64 size;
+        qint64 count;
         QHeaderView::ResizeMode resizeMode;
         inline SectionSpan() : size(0), count(0), resizeMode(QHeaderView::Interactive) {}
-        inline SectionSpan(int length, int sections, QHeaderView::ResizeMode mode)
+        inline SectionSpan(qint64 length, qint64 sections, QHeaderView::ResizeMode mode)
             : size(length), count(sections), resizeMode(mode) {}
-        inline int sectionSize() const { return (count > 0 ? size / count : 0); }
+        inline qint64 sectionSize() const { return (count > 0 ? size / count : 0); }
 #ifndef QT_NO_DATASTREAM
         inline void write(QDataStream &out) const
         { out << size; out << count; out << (int)resizeMode; }
@@ -302,9 +302,9 @@ public:
 
     QVector<SectionSpan> sectionSpans;
 
-    void createSectionSpan(int start, int end, int size, QHeaderView::ResizeMode mode);
-    void removeSectionsFromSpans(int start, int end);
-    void resizeSectionSpan(int visualIndex, int oldSize, int newSize);
+    void createSectionSpan(qint64 start, qint64 end, qint64 size, QHeaderView::ResizeMode mode);
+    void removeSectionsFromSpans(qint64 start, qint64 end);
+    void resizeSectionSpan(qint64 visualIndex, qint64 oldSize, qint64 newSize);
     void setDefaultSectionSize(int size);
 
     inline int headerSectionCount() const { // for debugging
@@ -340,8 +340,8 @@ public:
     }
 
     int headerSectionSize(int visual) const;
-    int headerSectionPosition(int visual) const;
-    int headerVisualIndexAt(int position) const;
+    qint64 headerSectionPosition(int visual) const;
+    int headerVisualIndexAt(qint64 position) const;
 
     // resize mode
     void setHeaderSectionResizeMode(int visual, QHeaderView::ResizeMode mode);
diff --git a/src/gui/itemviews/qtableview.cpp b/src/gui/itemviews/qtableview.cpp
index 63036b2..1083709 100644
--- a/src/gui/itemviews/qtableview.cpp
+++ b/src/gui/itemviews/qtableview.cpp
@@ -1314,8 +1314,8 @@ void QTableView::paintEvent(QPaintEvent *event)
     if (horizontalHeader->count() == 0 || verticalHeader->count() == 0 || !d->itemDelegate)
         return;
 
-    uint x = horizontalHeader->length() - horizontalHeader->offset() - (rightToLeft ? 0 : 1);
-    uint y = verticalHeader->length() - verticalHeader->offset() - 1;
+    qint64 x = horizontalHeader->length() - horizontalHeader->offset() - (rightToLeft ? 0 : 1);
+    qint64 y = verticalHeader->length() - verticalHeader->offset() - 1;
 
     const QRegion region = event->region().translated(offset);
     const QVector<QRect> rects = region.rects();
@@ -1345,23 +1345,29 @@ void QTableView::paintEvent(QPaintEvent *event)
 
     for (int i = 0; i < rects.size(); ++i) {
         QRect dirtyArea = rects.at(i);
-        dirtyArea.setBottom(qMin(dirtyArea.bottom(), int(y)));
+		qint64 da_bottom = qMin((qint64) dirtyArea.bottom(), y);
+		qint64 da_left = dirtyArea.left();
+		qint64 da_right = dirtyArea.right();
+		qint64 da_top = dirtyArea.top();
+        //dirtyArea.setBottom(qMin(dirtyArea.bottom(), int(y)));
         if (rightToLeft) {
-            dirtyArea.setLeft(qMax(dirtyArea.left(), d->viewport->width() - int(x)));
+			da_left = qMax((qint64) dirtyArea.left(), (qint64) (d->viewport->width()) - x);
+            //dirtyArea.setLeft(qMax(dirtyArea.left(), d->viewport->width() - int(x)));
         } else {
-            dirtyArea.setRight(qMin(dirtyArea.right(), int(x)));
+            //dirtyArea.setRight(qMin(dirtyArea.right(), int(x)));
+			da_right = qMin((qint64) dirtyArea.right(), x);
         }
 
         // get the horizontal start and end visual sections
-        int left = horizontalHeader->visualIndexAt(dirtyArea.left());
-        int right = horizontalHeader->visualIndexAt(dirtyArea.right());
+        int left = horizontalHeader->visualIndexAt(da_left);
+        int right = horizontalHeader->visualIndexAt(da_right);
         if (rightToLeft)
             qSwap(left, right);
         if (left == -1) left = 0;
         if (right == -1) right = horizontalHeader->count() - 1;
 
         // get the vertical start and end visual sections and if alternate color
-        int bottom = verticalHeader->visualIndexAt(dirtyArea.bottom());
+        int bottom = verticalHeader->visualIndexAt(da_bottom);
         if (bottom == -1) bottom = verticalHeader->count() - 1;
         int top = 0;
         bool alternateBase = false;
@@ -1376,7 +1382,7 @@ void QTableView::paintEvent(QPaintEvent *event)
                     alternateBase = !alternateBase;
             }
         } else {
-            top = verticalHeader->visualIndexAt(dirtyArea.top());
+            top = verticalHeader->visualIndexAt(da_top);
             alternateBase = (top & 1) && alternate;
         }
         if (top == -1 || top > bottom)
@@ -2030,15 +2036,15 @@ void QTableView::updateGeometries()
         return;
     d->geometryRecursionBlock = true;
 
-    int width = 0;
+    ssize_t width = 0;
     if (!d->verticalHeader->isHidden()) {
-        width = qMax(d->verticalHeader->minimumWidth(), d->verticalHeader->sizeHint().width());
-        width = qMin(width, d->verticalHeader->maximumWidth());
+        width = qMax((ssize_t) d->verticalHeader->minimumWidth(), (ssize_t) d->verticalHeader->sizeHint().width());
+        width = qMin(width, (ssize_t) d->verticalHeader->maximumWidth());
     }
-    int height = 0;
+    ssize_t height = 0;
     if (!d->horizontalHeader->isHidden()) {
         height = qMax(d->horizontalHeader->minimumHeight(), d->horizontalHeader->sizeHint().height());
-        height = qMin(height, d->horizontalHeader->maximumHeight());
+        height = qMin(height, (ssize_t) d->horizontalHeader->maximumHeight());
     }
     bool reverse = isRightToLeft();
      if (reverse)
@@ -2108,14 +2114,15 @@ void QTableView::updateGeometries()
 
     // vertical scroll bar
     const int rowCount = d->verticalHeader->count();
-    const int viewportHeight = vsize.height();
+    const ssize_t viewportHeight = vsize.height();
     int rowsInViewport = 0;
-    for (int height = 0, row = rowCount - 1; row >= 0; --row) {
+    for (ssize_t height = 0, row = rowCount - 1; row >= 0; --row) {
         int logical = d->verticalHeader->logicalIndex(row);
         if (!d->verticalHeader->isSectionHidden(logical)) {
             height += d->verticalHeader->sectionSize(logical);
-            if (height > viewportHeight)
+            if (height > viewportHeight) {
                 break;
+			}
             ++rowsInViewport;
         }
     }
@@ -2253,7 +2260,7 @@ int QTableView::sizeHintForColumn(int column) const
     Returns the y-coordinate in contents coordinates of the given \a
     row.
 */
-int QTableView::rowViewportPosition(int row) const
+qint64 QTableView::rowViewportPosition(int row) const
 {
     Q_D(const QTableView);
     return d->verticalHeader->sectionViewportPosition(row);
diff --git a/src/gui/itemviews/qtableview.h b/src/gui/itemviews/qtableview.h
index e39516d..2f37c18 100644
--- a/src/gui/itemviews/qtableview.h
+++ b/src/gui/itemviews/qtableview.h
@@ -78,7 +78,7 @@ public:
     void setHorizontalHeader(QHeaderView *header);
     void setVerticalHeader(QHeaderView *header);
 
-    int rowViewportPosition(int row) const;
+    qint64 rowViewportPosition(int row) const;
     int rowAt(int y) const;
 
     void setRowHeight(int row, int height);
