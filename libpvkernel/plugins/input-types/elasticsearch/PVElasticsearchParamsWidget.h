/**
 * @file
 *
 * @copyright (C) Picviz Labs 2011-March 2015
 * @copyright (C) ESI Group INENDI April 2015-2015
 */

#ifndef __PVELASTICSEARCHPARAMSWIDGET_H__
#define __PVELASTICSEARCHPARAMSWIDGET_H__

#include <QFileDialog>

// Generated by 'uic'. Cf. ../CMakeFiles.txt
#include "../common/PVParamsWidget.h"
#include "../../common/elasticsearch/PVElasticsearchAPI.h"
#include "../../common/elasticsearch/PVElasticsearchInfos.h"
#include "../../common/elasticsearch/PVElasticsearchQuery.h"
#include "PVElasticsearchPresets.h"

#include <pvkernel/widgets/PVQueryBuilder.h>

#include "PVElasticsearchPresets.h"

namespace PVRush
{

class PVInputTypeElasticsearch;
class PVElasticsearchQuery;
class PVElasticsearchInfos;

class PVElasticsearchParamsWidget : public PVParamsWidget<PVInputTypeElasticsearch,
                                                          PVElasticsearchPresets,
                                                          PVElasticsearchInfos,
                                                          PVElasticsearchQuery>
{
	Q_OBJECT

  private:
	enum EQueryType {
		QUERY_BUILDER = 0,
		JSON,
		SQL,

		COUNT
	};

  public:
	PVElasticsearchParamsWidget(PVInputTypeElasticsearch const* in_t,
	                            PVRush::hash_formats const& formats,
	                            QWidget* parent);

  public:
	QString get_server_query(std::string* error = nullptr) const override;
	QString get_serialize_query() const override;

  protected:
	size_t query_result_count(std::string* error = nullptr) override;
	bool fetch_server_data(const PVElasticsearchInfos& infos) override;
	void query_type_changed_slot() override;
	QString get_export_filters() override;
	void accept() override;
	PVElasticsearchInfos get_infos() const override;
	bool set_infos(PVElasticsearchInfos const& infos) override;
	void set_query(QString const& query) override;
	bool check_connection(std::string* error = nullptr) override;
	void export_query_result(QTextStream& output_stream,
	                         PVCore::PVProgressBox& pbox,
	                         std::string* error = nullptr) override;
	void edit_custom_format() override;

  private:
	void index_changed_slot(const QString& index);
	void index_changed_by_user_slot();
	void fetch_server_data_slot();
	void update_custom_format();
	void reset_columns_tree_widget();
	void set_columns_tree_widget_selection(const QString& filter_path);
	void tree_item_changed(QTreeWidgetItem* item, int column);
	size_t get_selected_columns_count() const;
	void set_query_type(QString const& query_type);
	QString get_sql_query_prefix() const;

  private:
	QPushButton* _btn_refresh;
	QComboBox* _combo_index;
	QTreeWidgetItem* _root_item = nullptr;
};

} // namespace PVRush

#endif // __PVELASTICSEARCHPARAMSWIDGET_H__
