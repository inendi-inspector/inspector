/**
 * \file PVElasticsearchParamsWidget.h
 *
 * Copyright (C) Picviz Labs 2015
 */

#ifndef PVELASTICSEARCHPARAMSWIDGET_H
#define PVELASTICSEARCHPARAMSWIDGET_H

#include <QFileDialog>

// Generated by 'uic'. Cf. ../CMakeFiles.txt
#include <ui_elasticsearch_params.h>

#include <pvkernel/rush/PVFormat.h>
#include <pvkernel/rush/PVXmlTreeNodeDom.h>
#include <pvkernel/widgets/PVPresetsWidget.h>
#include <pvkernel/widgets/PVQueryBuilder.h>

#include <QDomDocument>


#include "PVElasticsearchPresets.h"

namespace PVRush {

class PVInputTypeElasticsearch;
class PVElasticsearchQuery;
class PVElasticsearchInfos;

class PVElasticsearchParamsWidget: public QDialog, private Ui::DbParams
{
	Q_OBJECT

public:
	PVElasticsearchParamsWidget(PVInputTypeElasticsearch const* in_t, PVRush::hash_formats const& formats, QWidget* parent);
	~PVElasticsearchParamsWidget();

public:
	PVElasticsearchInfos get_infos() const;

	PVElasticsearchQuery get_query() const;
	QString get_elasticsearch_query() const;
	QString get_serialized_query() const;
	QString get_query_type() const;

	bool is_format_custom() { return _radio_new_format->isChecked(); };
	QString get_existing_format();
	QDomDocument get_custom_format() { return _new_format_doc; };

protected:
	void populate_presets();
	PVElasticsearchPresets::id_t get_current_preset_id();

protected slots:
	void preset_new_slot(const QString& name);
	void preset_load_slot(const QString& name);
	void preset_save_slot(const QString& name);
	void preset_remove_slot(const QString& name);
	void preset_text_changed_slot(const QString& text);
	void browse_existing_format_slot();
	void edit_new_format_slot();
	void use_existing_format_toggle_slot(bool toggle);
	void request_count();
	void refresh_indexes();
	void query_type_changed();
	void index_changed_by_user_slot();
	void index_changed(const QString& index);
	void check_connection_slot();
	void export_slot();

protected:
	bool set_infos(PVElasticsearchInfos const& infos);
	void set_query(QString const& query);

	void set_query_type(QString const& query_type);

	void load_preset(PVElasticsearchPresets::id_t id);
	void enable_used_format(bool is_existing);
	void show_def_params();
	static void show_layout_children(const QLayout* layout, bool show);

private:
	QString get_sql_query_prefix() const;
	bool check_connection();

protected:
	PVWidgets::PVPresetsWidget* _presets_widget;
	QSettings _settings;
	int64_t _last_load_preset;
	PVInputTypeElasticsearch const* _in_t;

protected:
	// New XML format created from the database fields
	QDomDocument _new_format_doc;

private:
	QFileDialog _file_dlg;
	PVWidgets::PVQueryBuilder* _querybuilder = nullptr;
};

}

#endif
