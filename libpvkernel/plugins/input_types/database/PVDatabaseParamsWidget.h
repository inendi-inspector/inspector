#ifndef PVDATABASEPARAMSWIDGET_H
#define PVDATABASEPARAMSWIDGET_H

// Generated by 'uic'. Cf. ../CMakeFiles.txt
#include "../ui_db_params.h"
#include "../../common/database/PVDBInfos.h"

#include <pvkernel/rush/PVFormat.h>
#include <pvkernel/rush/PVXmlTreeNodeDom.h>

#include <QDomDocument>

#include "PVDBPresets.h"

namespace PVRush {

class PVInputTypeDatabase;

class PVDatabaseParamsWidget: public QDialog, private Ui::DbParams
{
	Q_OBJECT

public:
	PVDatabaseParamsWidget(PVInputTypeDatabase const* in_t, PVRush::hash_formats const& formats, QWidget* parent);
	~PVDatabaseParamsWidget();

public:
	void get_dbinfos(PVDBInfos& infos);
	QString get_query();
	bool is_format_custom() { return _radio_new_format->isChecked(); };
	QString get_existing_format();
	QDomDocument get_custom_format() { return _new_format_doc; };

protected:
	void populate_presets();
	PVDBPresets::id_t get_current_preset_id();
	bool is_preset_txt_new();

public slots:
	void preset_new_Slot();
	void preset_load_Slot();
	void preset_save_Slot();
	void preset_remove_Slot();
	void preset_text_changed_Slot(const QString& text);
	void sql_type_changed_Slot(int idx);
	void query_preview_Slot();
	void update_fields_Slot();
	void edit_existing_format_Slot();
	void edit_new_format_Slot();
	void use_existing_format_toggle_Slot(bool toggle);

protected:
	bool set_dbinfos(PVDBInfos const& infos);
	void set_query(QString const& query);
	bool select_type(QString const& qt_type);
	void load_preset(PVDBPresets::id_t id);
	void add_preset(QString const& name, PVDBPresets::id_t id);
	QString get_current_driver();
	void enable_used_format(bool is_existing);

protected:
	QSettings _settings;
	int64_t _last_load_preset;
	PVInputTypeDatabase const* _in_t;

protected:
	// New XML format created from the database fields
	QDomDocument _new_format_doc;
};

}

#endif
