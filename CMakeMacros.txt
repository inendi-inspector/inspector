macro(declare_internal_library libname)
	string(TOUPPER ${libname} libname_upper)
	string(TOLOWER ${libname} libname_lower)
	# Add dev includes and build includes as possible include dir
	# Build includes are required because of ui_xxx.h generated files
	# Dev includes are required because they are use before being copy in build directory
	set(${libname_upper}_INCLUDE_DIRS "${CMAKE_CURRENT_BINARY_DIR}/lib${libname_lower}/src/include"
					  "${CMAKE_CURRENT_SOURCE_DIR}/lib${libname_lower}/src/include")
	add_subdirectory(lib${libname_lower})
endmacro()

function(pv_qt5_wrap_ui outfiles include_dir)
	set(options)
	set(oneValueArgs)
	set(multiValueArgs OPTIONS)

	cmake_parse_arguments(_WRAP_UI "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

	set(ui_files ${_WRAP_UI_UNPARSED_ARGUMENTS})
	set(ui_options ${_WRAP_UI_OPTIONS})

	foreach(it ${ui_files})
		get_filename_component(outfile ${it} NAME_WE)
		get_filename_component(infile ${it} ABSOLUTE)
		set(outfile ${CMAKE_CURRENT_BINARY_DIR}/include/${include_dir}/ui_${outfile}.h)
		add_custom_command(OUTPUT ${outfile}
			COMMAND ${Qt5Widgets_UIC_EXECUTABLE}
			ARGS ${ui_options} -o ${outfile} ${infile}
			MAIN_DEPENDENCY ${infile} VERBATIM)
		list(APPEND ${outfiles} ${outfile})
	endforeach()
	set(${outfiles} ${${outfiles}} PARENT_SCOPE)
endfunction()

macro(declare_customer_cap cap default_dev default_customer)
	# Default value
	if (NOT DEFINED ${cap})
		if (PICVIZ_DEVELOPER_MODE)
			set(${cap} ${default_dev})
		else()
			set(${cap} ${default_customer})
		endif()
	endif()
endmacro()

macro(declare_pv_test target)
	add_executable(${target} EXCLUDE_FROM_ALL ${ARGN})
	set(__OWN_TESTS_TARGETS "${__OWN_TESTS_TARGETS};${target}")
	set(__TESTS_TARGETS "${__OWN_TESTS_TARGETS};${__TESTS_TARGETS}" PARENT_SCOPE)
endmacro()

macro(propagate_tests_targets_to_parent)
	set(__TESTS_TARGETS ${__TESTS_TARGETS} PARENT_SCOPE)
endmacro()

macro(declare_lib_tests_target)
	add_custom_target(testsuite DEPENDS ${__OWN_TESTS_TARGETS})
	# JBL's special request
	add_custom_target(love DEPENDS testsuite)
endmacro()

function(strcasecmp res str1 str2)
	string(TOLOWER ${str1} str1_lower)
	string(TOLOWER ${str2} str2_lower)
	string(COMPARE EQUAL str1_lower str2_lower res)
endfunction()

# GCC version
macro(GET_GCC_VERSION major minor)
	execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion
                    OUTPUT_VARIABLE GCC_VERSION)
	string(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${GCC_VERSION})
	list(GET GCC_VERSION_COMPONENTS 0 ${major})
	list(GET GCC_VERSION_COMPONENTS 1 ${minor})
endmacro()
