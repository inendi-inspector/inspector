#
# @file
#
# @copyright (C) Picviz Labs 2010-March 2015
# @copyright (C) ESI Group INENDI April 2015-2015

###############################################################################
# Define the Qt Core package
###############################################################################
ADD_DEFINITIONS(-DQT_SHARED)
ADD_DEFINITIONS(-DQT_NO_KEYWORDS)
FIND_PACKAGE(Qt5Core REQUIRED)
message(STATUS "QtCore include dirs: " ${Qt5Core_INCLUDE_DIR})
include_directories(SYSTEM ${Qt5Core_INCLUDE_DIRS})

###############################################################################
# Define the Intel TBB Library
###############################################################################

set(TBB_ROOT_DIR /opt/tbb-latest)
find_package(TBB 4.4 REQUIRED)

message(STATUS "TBB include dirs: " ${TBB_INCLUDE_DIRS})
include_directories(SYSTEM AFTER ${TBB_INCLUDE_DIRS})

if(CMAKE_BUILD_TYPE_LOWER MATCHES "debug")
	set(TBB_USE_DEBUG "1")
endif()

###############################################################################
# Define the OpenCL runtime
###############################################################################

pkg_check_modules(OPENCL REQUIRED OpenCL)

if(OPENCL_FOUND)
	message(STATUS "OpenCL runtime libraries: " ${OPENCL_LIBRARIES})

	find_program(PWGEN_BIN pwgen)
	if(NOT PWGEN_BIN)
		message(FATAL_ERROR "pwgen does not seem to installed")
	endif()
else()
	message(FATAL_ERROR "No OpenCL environment found")
endif()

###############################################################################
# Define variables for Boost library
###############################################################################

#set(Boost_DEBUG TRUE)
set(Boost_USE_STATIC_LIBS       OFF)
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)
add_definitions(-DBOOST_PROGRAM_OPTIONS_DYN_LINK)
find_package(Boost 1.49 REQUIRED COMPONENTS date_time system thread program_options)

message(STATUS "Boost include dirs: " ${BOOST_INCLUDEDIR})
include_directories(SYSTEM AFTER ${BOOST_INCLUDEDIR})

###############################################################################
# Check for OpenMP
###############################################################################
if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  set(OpenMP_LIBRARIES "-fopenmp=libiomp5")
  add_definitions("-fopenmp=libiomp5")
else()
  find_package(OpenMP REQUIRED)
# This package does not declare the library used by GCC
  set(OpenMP_LIBRARIES ${OpenMP_CXX_FLAGS})
  add_definitions(${OpenMP_CXX_FLAGS})
endif()

message(STATUS "OpenMP Libraries: ${OpenMP_LIBRARIES}")
message(STATUS "OpenMP C FLAGS: ${OpenMP_C_FLAGS}")
message(STATUS "OpenMP CXX FLAGS: ${OpenMP_CXX_FLAGS}")

###############################################################################
# Check for libnuma
###############################################################################
find_package(LibNUMA REQUIRED)
if (LIBNUMA_FOUND)
  set(LibNUMA_LIBRARIES "-lnuma")
  message(STATUS "NUMA Libraries: ${LibNUMA_LIBRARIES}")
else()
  message(ERROR "libNUMA not found!")
endif()

###############################################################################
# Check for rapidjson
###############################################################################
find_package(rapidjson REQUIRED)
if (RAPIDJSON_FOUND)
  message(STATUS " rapidjson include directory: ${RAPIDJSON_INCLUDE_DIRS}")
else()
  message(ERROR " rapidjson not found!")
endif()

########################
# Needed for libpvrush #
########################

###############################################################################
# Check for Archive library
###############################################################################
pkg_check_modules(ARCHIVE REQUIRED libarchive)

###############################################################################
# Google Breakpad
###############################################################################
pkg_check_modules(BREAKPAD REQUIRED breakpad-client)

message(STATUS "Google Breakpad libraries: ${BREAKPAD_LIBRARIES}")
message(STATUS "Google Breakpad include: ${BREAKPAD_INCLUDE_DIRS}")

###############################################################################
# Check for libpcre++
# This is a library to handle perl regex
###############################################################################
find_package(PCRE REQUIRED)

###############################################################################
# OpenGL
# TODO : Check result and deduce OpenGL Support in Qt?
###############################################################################
find_package(OpenGL REQUIRED)

###############################################################################
# IBM ICU
###############################################################################
find_package(ICU REQUIRED) 

message(STATUS "ICU found: " ${ICU_FOUND})
if(ICU_FOUND)
	message(STATUS "ICU include: ${ICU_INCLUDE}")
  	message(STATUS "ICU libraries: ${ICU_LIBRARY}")
endif(ICU_FOUND)

###############################################################################
# Check for CURL
###############################################################################
find_package(CURL "7.38.0" REQUIRED)

################################################################################
## Check for Hwloc installation
################################################################################
# TODO : Should be replace by PVHwloc
pkg_check_modules(HWLOC REQUIRED hwloc)
find_package(PVHwloc REQUIRED)

###############################################################################
# Check for Furl installation
###############################################################################

set(FURL_STATIC_LIB /usr/local/lib/libfurll-utf8.a)
if(EXISTS ${FURL_STATIC_LIB})
  add_definitions(-DFURL_UTF8_CHAR)
else()
  message( FATAL_ERROR "FURL Can't be found" )
endif ()

###############################################################################
# Check for PVCOP installation
###############################################################################      

pkg_check_modules(SIGCPP REQUIRED sigc++-2.0)

###############################################################################
# Check for PVCOP installation
###############################################################################      

find_package(PVCOP REQUIRED)

###############################################################################
# Check for License installation
###############################################################################      

find_package(PVLicense REQUIRED)
