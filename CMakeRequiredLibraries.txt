#
# QT is needed for both libpvgl and picviz-inspector
#
ADD_DEFINITIONS(-DQT_NO_DEBUG)
ADD_DEFINITIONS(-DQT_SHARED)
find_package(Qt4 REQUIRED)
# QT XML support
set(QT_USE_QTXML TRUE)
include(${QT_USE_FILE})
set(QT4_WRAP_OPTIONS -DBOOST_TT_HAS_OPERATOR_HPP_INCLUDED)

#
# Check for Intel TBB library
#

if(WIN32)
	set(TBB_FOUND "true")
	set(TBB_INCLUDE_DIRS "C:\\dev\\tbb\\include\\")
	if(CMAKE_BUILD_TYPE MATCHES "Debug")	
		set(TBB_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbb_debug.lib")
		set(TBB_MALLOC_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbbmalloc_debug.lib")
	else()
		set(TBB_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbb.lib")
		set(TBB_MALLOC_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbbmalloc.lib")
	endif()
	set(TBB_LIBRARIES ${TBB_LIBRARY} ${TBB_MALLOC_LIBRARY})
else(WIN32)
find_package(TBB REQUIRED)
endif(WIN32)

if(CMAKE_BUILD_TYPE MATCHES "Debug")
	set(TBB_USE_DEBUG "1")
endif()

#find_package(CUDA)
if(CUDA_SDK_ROOT_DIR MATCHES "CUDA_SDK_ROOT_DIR-NOTFOUND")
  set(CUDA_SDK_ROOT_DIR "/opt/cuda_sdk/")
endif(CUDA_SDK_ROOT_DIR MATCHES "CUDA_SDK_ROOT_DIR-NOTFOUND")

if(CUDA_FOUND)
  add_definitions(-DCUDA)
endif(CUDA_FOUND)

#
# Check for Boost library
#
set(Boost_DEBUG TRUE)
if(WIN32)
	set(BOOST_ROOT "C:\\dev\\boost\\install-root")
	set(BOOST_INCLUDEDIR "C:\\dev\\boost\\install-root\\include\\boost-1_48")
	#set(BOOST_LIBRARYDIR "C:\\dev\\boost\\install-root\\lib")
	set(Boost_USE_STATIC_LIBS       OFF)
	set(Boost_USE_MULTITHREADED      ON)
	set(Boost_USE_STATIC_RUNTIME    OFF)
	# Define this or boost autoamtically tries to link with lib* files, which aren't present under Windows
	add_definitions(-DBOOST_ALL_NO_LIB)
	#link_directories("C:\\dev\\boost\\stage\\lib")
else(WIN32)
	set(Boost_USE_STATIC_LIBS       OFF)
	set(Boost_USE_MULTITHREADED      ON)
	set(Boost_USE_STATIC_RUNTIME    OFF)
endif(WIN32)
set(Boost_ADDITIONAL_VERSIONS "1.48.0")
find_package(Boost 1.48.0 REQUIRED COMPONENTS date_time system thread)
set(Boost_LIBRARIES_SAVE ${Boost_LIBRARIES})

if(USE_BOOST148_DEBIAN)
	find_package(Boost COMPONENTS python32)
else(USE_BOOST148_DEBIAN)
	find_package(Boost COMPONENTS python3)
endif(USE_BOOST148_DEBIAN)

set(Boost_LIBRARIES_PYTHON ${Boost_LIBRARIES})
set(Boost_LIBRARIES ${Boost_LIBRARIES_SAVE})

#
# Check for OpenMP
#
if (USE_OPENMP)
	find_package(OpenMP REQUIRED)
	# This package does not declare the library used by GCC
	if (WIN32)
		set(OpenMP_LIBRARIES "")
	else (WIN32)
		set(OpenMP_LIBRARIES ${OpenMP_CXX_FLAGS})
	endif(WIN32)
else (USE_OPENMP)
	set(OpenMP_LIBRARIES "")
	set(OpenMP_C_FLAGS "")
	set(OpenMP_CXX_FLAGS "")
endif (USE_OPENMP)
message(STATUS "OpenMP Libraries: ${OpenMP_LIBRARIES}")
message(STATUS "OpenMP C FLAGS: ${OpenMP_C_FLAGS}")
message(STATUS "OpenMP CXX FLAGS: ${OpenMP_CXX_FLAGS}")


########################
# Needed for libpvrush #
########################

#
# Check for PCAP library
#
if(NOT WIN32)
	find_package(PCAP REQUIRED)
else(NOT WIN32)
	set(PCAP_LIBRARIES "C:\\dev\\winpcap\\Lib\\x64\\wpcap.lib" "C:\\dev\\winpcap\\Lib\\x64\\Packet.lib")
	set(PCAP_INCLUDE_DIRS "C:\\dev\\winpcap\\Include")
endif(NOT WIN32)

#
# Check for DUMBNET library
#

#if(WIN32)
#	set(DUMBNET_LIBRARIES "C:\\dev\\libdnet\\lib\\dnet.lib" "ws2_32.lib")
#	set(DUMBNET_INCLUDE_DIRS "C:\\dev\\libdnet\\include")
#else(WIN32)
#	find_package(DUMBNET REQUIRED)
#endif(WIN32)

#
# Check for Archive library
#

if (WIN32)
	set(ARCHIVE_LIBRARY "C:\\dev\\libarchive\\libarchive\\Release\\archive_static.lib")
	set(ARCHIVE_INCLUDE_DIRS "C:\\dev\\libarchive\\libarchive\\")
	add_definitions(-DLIBARCHIVE_STATIC=1)
else(WIN32)
	set(ARCHIVE_LIBRARY "archive")
	set(ARCHIVE_INCLUDE_DIRS "")
endif(WIN32)

#
# Check for libpcre++
#
#if (NOT WIN32)
#	find_package(PCRE REQUIRED)
#else (NOT WIN32)
#endif (NOT WIN32)

#
# Check for Java and JNI
#
find_package(Java)
find_package(JNI)

if(JAVA_FOUND)
	include(UseJava)
endif(JAVA_FOUND)


#
# Check for libhdfs (needed for Hadoop support).
#
if (WIN32)
else (WIN32)
	find_package(HDFS)
endif(WIN32)

#
# Under Win32, check for Winsocks

if(WIN32)
	#FIND_LIBRARY(WINSOCK_LIB NAMES ws2_32)
	set(WINSOCK_LIB ws2_32)
endif(WIN32)

######################
# Needed for libpvgl #
######################
#
# OpenGL
#
find_package(OpenGL REQUIRED)

#
# GLEW
#
if (WIN32)
	set(GLEW_INCLUDE_PATH "C:\\dev\\glew-amd64\\include")
	set(GLEW_LIBRARY "C:\\dev\\glew-amd64\\lib\\glew32s.lib")
else(WIN32)
	find_package(GLEW REQUIRED)
endif(WIN32)

#
# GLUT
#
if (WIN32)
	set(GLUT_INCLUDE_DIR "C:\\dev\\freeglut\\include\\")
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	set(GLUT_glut_LIBRARY "C:\\dev\\freeglut\\VisualStudio2008\\x64\\Debug\\freeglut.lib")
else()
	set(GLUT_glut_LIBRARY "C:\\dev\\freeglut\\VisualStudio2008\\x64\\Release\\freeglut.lib")
endif()
else(WIN32)
  find_package(GLUT REQUIRED)
endif(WIN32)

#
# Freetype
#
if (WIN32)
	set(FREETYPE_INCLUDE_DIRS "C:\\dev\\freetype-amd64\\include")
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	set(FREETYPE_LIBRARY "C:\\dev\\freetype-amd64\\lib\\freetyped.lib")
else()
	set(FREETYPE_LIBRARY "C:\\dev\\freetype-amd64\\lib\\freetype.lib")
endif()
else(WIN32)
	find_package(Freetype REQUIRED)
endif(WIN32)

#
# IBM ICU
#
if (WIN32)
	set(ICU_LIBRARY "C:\\dev\\icu-amd64\\lib64\\icudt.lib" "C:\\dev\\icu-amd64\\lib64\\icuin.lib" "C:\\dev\\icu-amd64\\lib64\\icuio.lib" "C:\\dev\\icu-amd64\\lib64\\icule.lib" "C:\\dev\\icu-amd64\\lib64\\iculx.lib" "C:\\dev\\icu-amd64\\lib64\\icutu.lib" "C:\\dev\\icu-amd64\\lib64\\icuuc.lib")
	set(ICU_INCLUDE "C:\\dev\\icu-amd64\\include\\")
else(WIN32)
	find_package(ICU REQUIRED) 
endif(WIN32)

# It is OK to find those package even if they are not compiled
# since we've defined the variable PICVIZ_SINGLE_TREE_BUILD 
# it just returns PATHS and avoid adding multiple search of the
# same package in the different sub directories.
find_package(PVKernel REQUIRED)
find_package(Picviz REQUIRED)
find_package(PVSDK REQUIRED)

if(USE_PVGL2)
	find_package(PVGL2 REQUIRED)
else(USE_PVGL2)
	find_package(PVGL REQUIRED)
endif(USE_PVGL2)

###############################
# Needed for picviz-inspector #
###############################

#if (USE_OWN_LIBCURL)
if(WIN32)
	add_definitions(-DCURL_STATICLIB)
	set(CURL_INCLUDE_DIR "C:\\dev\\curl\\include")
#	set(CURL_LIBRARY "C:\\dev\\curl\\lib\\LIB-Release\\libcurl.lib" "wldap32.lib")
	set(CURL_LIBRARY "C:\\dev\\curl\\lib\\Release\\curllib_static.lib" "C:\\dev\\curl\\openldap.lib" "C:\\dev\\curl\\ssleay32.lib" "C:\\dev\\curl\\libeay32.lib")
else(WIN32)
	#set(CURL_INCLUDE_DIR "/opt/curl/include")
	#set(CURL_LIBRARY "/opt/curl/lib/libcurl.so")
 	find_package(CURL REQUIRED)
endif(WIN32)
#else(USE_OWN_LIBCURL)
# 	find_package(CURL REQUIRED)
#endif(USE_OWN_LIBCURL)

if(WIN32)
        set(PERLLIBS_FOUND "FALSE")
        #       set(PERL_INCLUDE_PATH "C:\\strawberry\\c\\include")                                                                                   
        #       set(PERL_LIBRARY "C:\\strawberry\\perl\\bin\\perl510.dll")                                                                            else(WIN32)
        find_package(PerlLibs)
endif(WIN32)

# TODO: check that the good python version is found (the 3.2)
# We also need to check that these packages are installed:
#  * python3.2-dev
#  * libpython3.2
#  * libboost-python1.46.1
#  * libboost-python1.46-dev
set(Python_ADDITIONAL_VERSIONS 3.2)
find_package(PythonLibs)

#
# Check for X11 (used to detect caps lock activated ;-))
#
if(NOT WIN32)
	find_package(X11 REQUIRED)
endif(NOT WIN32)
