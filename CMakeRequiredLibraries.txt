#
# \file CMakeRequiredLibraries.txt
#
# Copyright (C) Picviz Labs 2010-2012

###############################################################################
# Define the Qt Core package
###############################################################################
ADD_DEFINITIONS(-DQT_SHARED)
FIND_PACKAGE(Qt5Core REQUIRED)
message(STATUS "QtCore include dirs: " ${Qt5Core_INCLUDE_DIR})
include_directories(${Qt5Core_INCLUDE_DIRS})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Core_EXECUTABLE_COMPILE_FLAGS}")

###############################################################################
# Define the Intel TBB Library
###############################################################################

set(TBB_ROOT /opt/tbb-latest)
find_package(TBB REQUIRED)
set(TBB_LIBRARIES ${TBB_LIBRARY} ${TBB_MALLOC_LIBRARY} -L/opt/tbb-latest)

message(STATUS "TBB include dirs: " ${TBB_INCLUDE_DIRS})
include_directories(AFTER ${TBB_INCLUDE_DIRS})

if(CMAKE_BUILD_TYPE_LOWER MATCHES "debug")
	set(TBB_USE_DEBUG "1")
endif()

###############################################################################
# Define the Cuda runtime
###############################################################################
if (${CMAKE_VERSION} STRLESS 2.8.12.1)
	# cmake support CUDA 5.5 since 2.8.12.1 because this CUDA version
	# splitted libnpp.so into 3 sub-librairies
	find_package(CUDA 5.0 EXACT)
else()
	find_package(CUDA 5.0)
endif()

message(STATUS "CUDA found: " ${CUDA_FOUND})
if(CUDA_FOUND)
	message(STATUS "CUDA version: " ${CUDA_VERSION_STRING})
  	message(STATUS "CUDA toolkit root dir: " ${CUDA_TOOLKIT_ROOT_DIR})
  	message(STATUS "CUDA 64bit device: " ${CUDA_64_BIT_DEVICE_CODE})
  	message(STATUS "CUDA runtime libraries: " ${CUDA_LIBRARIES})
  	message(STATUS "CUDA npp libraries: " ${CUDA_npp_LIBRARY})
	add_definitions(-DCUDA)
else()
	message(FATAL_ERROR "CUDA not found")
endif(CUDA_FOUND)


###############################################################################
# Define variables for Boost library
###############################################################################

#set(Boost_DEBUG TRUE)
set(Boost_USE_STATIC_LIBS       OFF)
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)
add_definitions(-DBOOST_PROGRAM_OPTIONS_DYN_LINK)

# as we want to separate Boost's Python library path to others Boost libraries,
# we do the detection in 2 steps : one for all needed modules except python, one other for python
find_package(Boost 1.49 COMPONENTS date_time system thread program_options)
# a little backup of $Boost_LIBRARIES because the second detection will overwrite it
set(Boost_LIBRARIES_SAVE ${Boost_LIBRARIES})

find_package(Boost 1.49 COMPONENTS python-py27)
set(Boost_LIBRARIES_PYTHON ${Boost_LIBRARIES})

# and a little restoration
set(Boost_LIBRARIES ${Boost_LIBRARIES_SAVE})

message(STATUS "Boost include dirs: " ${BOOST_INCLUDEDIR})
include_directories(AFTER ${BOOST_INCLUDEDIR})

###############################################################################
# Check for OpenMP
###############################################################################
find_package(OpenMP REQUIRED)
# This package does not declare the library used by GCC
set(OpenMP_LIBRARIES ${OpenMP_CXX_FLAGS})
add_definitions(${OpenMP_CXX_FLAGS})

message(STATUS "OpenMP Libraries: ${OpenMP_LIBRARIES}")
message(STATUS "OpenMP C FLAGS: ${OpenMP_C_FLAGS}")
message(STATUS "OpenMP CXX FLAGS: ${OpenMP_CXX_FLAGS}")

###############################################################################
# Check for libnuma
###############################################################################
find_package(LibNUMA REQUIRED)
if (LIBNUMA_FOUND)
  set(LibNUMA_LIBRARIES "-lnuma")
  message(STATUS "NUMA Libraries: ${LibNUMA_LIBRARIES}")
else()
  message(ERROR "libNUMA not found!")
endif()

###############################################################################
# Check for rapidjson
###############################################################################
find_package(rapidjson REQUIRED)
if (RAPIDJSON_FOUND)
  message(STATUS " rapidjson include directory: ${RAPIDJSON_INCLUDE_DIRS}")
else()
  message(ERROR " rapidjson not found!")
endif()

########################
# Needed for libpvrush #
########################

###############################################################################
# Check for PCAP library
###############################################################################
find_package(PCAP REQUIRED)

###############################################################################
# Check for Archive library
###############################################################################

pkg_check_modules(ARCHIVE REQUIRED libarchive)

###############################################################################
# Check for libpcre++
# This is a library to handle perl regex
###############################################################################
find_package(PCRE REQUIRED)

###############################################################################
# OpenGL
# TODO : Check result and deduce OpenGL Support in Qt?
###############################################################################
find_package(OpenGL REQUIRED)

###############################################################################
# IBM ICU
###############################################################################
find_package(ICU REQUIRED) 

message(STATUS "ICU found: " ${ICU_FOUND})
if(ICU_FOUND)
	message(STATUS "ICU include: ${ICU_INCLUDE}")
  	message(STATUS "ICU libraries: ${ICU_LIBRARY}")
endif(ICU_FOUND)


###############################################################################
# Check for CURL
###############################################################################
find_package(CURL "7.38.0" REQUIRED)

###############################################################################
# Check for Perl support
# TODO : Check if it is found?
###############################################################################
find_package(PerlLibs)

###############################################################################
# Check for Python support
# TODO : Check if it is found?
###############################################################################
# TODO: check that the good python version is found (the 3.2)
# We also need to check that these packages are installed:
#  * python3.2-dev
#  * libpython3.2
set(Python_ADDITIONAL_VERSIONS 2.7)
find_package(PythonLibs)
if(PYTHONLIBS_FOUND)
	add_definitions(-DENABLE_PYTHON_SUPPORT)
endif(PYTHONLIBS_FOUND)

###############################################################################
# Check for Correlation
# FIXME : It can't be enable anymore as it will not compile.
#
# Check for tulip 3.7
###############################################################################
if(ENABLE_CORRELATION)
	#
	# Check for Tulip 3.7 or above
	#
	# find_package(TULIP3 <VERSION> ...) does not seem to work...
	set(TULIP_REQUIRED_VERSION 3.7)
	find_package(TULIP3 3.7 REQUIRED)
	if(TULIP_FOUND)
		if(TULIP_VERSION STRLESS TULIP_REQUIRED_VERSION)
			message(FATAL_ERROR "Tulip ${TULIP_VERSION} is installed but ${TULIP_REQUIRED_VERSION} is required")
		else()
			message(STATUS "Tulip found: ${TULIP_VERSION}")
			message(STATUS "Tulip include dir: ${TULIP_INCLUDE_DIR}")
			add_definitions(-DENABLE_CORRELATION)
		endif()
		message(STATUS "Correlation enabled")
	else()
		message(WARNING "Tulip not found, disabling correlation")
		set(ENABLE_CORRELATION FALSE)
	endif()
else(ENABLE_CORRELATION)
	message(STATUS "Correlation disabled")
endif(ENABLE_CORRELATION)

###############################################################################
# Check for Hwloc installation
###############################################################################

find_package(HWLoc REQUIRED)
if (HWLOC_FOUND)
  include_directories(${HWLOC_INCLUDE_DIRS})
endif ()

###############################################################################
# Check for Furl installation
###############################################################################

set(FURL_STATIC_LIB /usr/local/lib/libfurll.a)
if(EXISTS ${FURL_STATIC_LIB})
  add_definitions(-DFURL_UTF16_CHAR)
else()
  message( FATAL_ERROR "FURL Can't be found" )
endif ()

###############################################################################
# Check for Arcsight installation
###############################################################################

pkg_check_modules(GSOAPPP REQUIRED gsoap++)
set(ARCSIGHT_STATIC_LIB /usr/local/lib/libarcsight.a)
if(NOT EXISTS ${ARCSIGHT_STATIC_LIB})
  message( FATAL_ERROR "Arcsight Can't be found" )
endif ()

set(ARCSIGHT_LIBRARIES ${ARCSIGHT_STATIC_LIB} ${GSOAPPP_LIBRARIES})
