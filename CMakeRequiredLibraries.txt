#
# \file CMakeRequiredLibraries.txt
#
# Copyright (C) Picviz Labs 2010-2012

#
# QT is needed for picviz-inspector
#
ADD_DEFINITIONS(-DQT_SHARED)
FIND_PACKAGE(Qt5 COMPONENTS Core)

#
# Check for Intel TBB library
#

if(WIN32)
	set(TBB_FOUND "true")
	set(TBB_INCLUDE_DIRS "C:\\dev\\tbb\\include\\")
	if(CMAKE_BUILD_TYPE MATCHES "Debug")	
		set(TBB_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbb_debug.lib")
		set(TBB_MALLOC_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbbmalloc_debug.lib")
	else()
		set(TBB_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbb.lib")
		set(TBB_MALLOC_LIBRARY "C:\\dev\\tbb\\lib\\intel64\\vc9\\tbbmalloc.lib")
	endif()
	set(TBB_LIBRARIES ${TBB_LIBRARY} ${TBB_MALLOC_LIBRARY})
else(WIN32)
set(TBB_ROOT /opt/tbb-latest)
find_package(TBB REQUIRED)
set(TBB_LIBRARIES ${TBB_LIBRARY} ${TBB_MALLOC_LIBRARY} -L/opt/tbb-latest)
endif(WIN32)

#set(TBB_MALLOC_LIBRARY "")
#set(TBB_LIBRARIES ${TBB_LIBRARY})

if(CMAKE_BUILD_TYPE MATCHES "Debug")
	set(TBB_USE_DEBUG "1")
endif()

if (${CMAKE_VERSION} STRLESS 2.8.12.1)
	# cmake support CUDA 5.5 since 2.8.12.1 because this CUDA version
	# splitted libnpp.so into 3 sub-librairies
	find_package(CUDA 5.0 EXACT)
else()
	find_package(CUDA 5.0)
endif()

if(CUDA_FOUND)
	add_definitions(-DCUDA)
else()
  message(FATAL_ERROR "CUDA not found")
endif(CUDA_FOUND)

#
# Check for Boost library
#

#set(Boost_DEBUG TRUE)
if(WIN32)
	set(BOOST_ROOT "C:\\dev\\boost\\install-root")
	set(BOOST_INCLUDEDIR "C:\\dev\\boost\\install-root\\include\\boost-1_48")
	#set(BOOST_LIBRARYDIR "C:\\dev\\boost\\install-root\\lib")
	set(Boost_USE_STATIC_LIBS       OFF)
	set(Boost_USE_MULTITHREADED      ON)
	set(Boost_USE_STATIC_RUNTIME    OFF)
	# Define this or boost automatically tries to link with lib* files, which aren't present under Windows
	add_definitions(-DBOOST_ALL_NO_LIB)
	#link_directories("C:\\dev\\boost\\stage\\lib")
else(WIN32)
	set(Boost_USE_STATIC_LIBS       OFF)
	set(Boost_USE_MULTITHREADED      ON)
	set(Boost_USE_STATIC_RUNTIME    OFF)
endif(WIN32)
add_definitions(-DBOOST_PROGRAM_OPTIONS_DYN_LINK)

# as we want to separate Boost's Python library path to others Boost libraries,
# we do the detection in 2 steps : one for all needed modules except python, one other for python
find_package(Boost 1.49 COMPONENTS date_time system thread program_options)
# a little backup of $Boost_LIBRARIES because the second detection will overwrite it
set(Boost_LIBRARIES_SAVE ${Boost_LIBRARIES})

find_package(Boost 1.49 COMPONENTS python-py27)
set(Boost_LIBRARIES_PYTHON ${Boost_LIBRARIES})

# and a little restoration
set(Boost_LIBRARIES ${Boost_LIBRARIES_SAVE})

###############################################################################
# Check for OpenMP
###############################################################################
find_package(OpenMP REQUIRED)
# This package does not declare the library used by GCC
if (WIN32)
	set(OpenMP_LIBRARIES "")
else (WIN32)
	set(OpenMP_LIBRARIES ${OpenMP_CXX_FLAGS})
endif(WIN32)
add_definitions(${OpenMP_CXX_FLAGS})

message(STATUS "OpenMP Libraries: ${OpenMP_LIBRARIES}")
message(STATUS "OpenMP C FLAGS: ${OpenMP_C_FLAGS}")
message(STATUS "OpenMP CXX FLAGS: ${OpenMP_CXX_FLAGS}")

#
# Check for libnuma
#
find_package(LibNUMA REQUIRED)
if (LIBNUMA_FOUND)
  set(LibNUMA_LIBRARIES "-lnuma")
  message(STATUS "NUMA Libraries: ${LibNUMA_LIBRARIES}")
else()
  message(ERROR "libNUMA not found!")
endif()

#
# Check for rapidjson
#
find_package(rapidjson REQUIRED)
if (RAPIDJSON_FOUND)
  message(STATUS " rapidjson include directory: ${RAPIDJSON_INCLUDE_DIRS}")
else()
  message(ERROR " rapidjson not found!")
endif()

########################
# Needed for libpvrush #
########################

#
# Check for PCAP library
#
if(NOT WIN32)
	find_package(PCAP REQUIRED)
else(NOT WIN32)
	set(PCAP_LIBRARIES "C:\\dev\\winpcap\\Lib\\x64\\wpcap.lib" "C:\\dev\\winpcap\\Lib\\x64\\Packet.lib")
	set(PCAP_INCLUDE_DIRS "C:\\dev\\winpcap\\Include")
endif(NOT WIN32)


#
# Check for Archive library
#

if (WIN32)
	set(ARCHIVE_LIBRARY "C:\\dev\\libarchive\\libarchive\\Release\\archive_static.lib")
	set(ARCHIVE_INCLUDE_DIRS "C:\\dev\\libarchive\\libarchive\\")
	add_definitions(-DLIBARCHIVE_STATIC=1)
else(WIN32)
	set(ARCHIVE_LIBRARY "archive")
	set(ARCHIVE_INCLUDE_DIRS "")
endif(WIN32)

#
# Check for libpcre++
#
if (NOT WIN32)
	find_package(PCRE REQUIRED)
else (NOT WIN32)
endif (NOT WIN32)

#
# Check for Java and JNI
#
find_package(Java)
find_package(JNI)

if(JAVA_FOUND)
	include(UseJava)
endif(JAVA_FOUND)


#
# Check for libhdfs (needed for Hadoop support).
#
if (WIN32)
else (WIN32)
	find_package(HDFS)
endif(WIN32)

#
# Under Win32, check for Winsocks

if(WIN32)
	#FIND_LIBRARY(WINSOCK_LIB NAMES ws2_32)
	set(WINSOCK_LIB ws2_32)
endif(WIN32)

#
# OpenGL
#
find_package(OpenGL REQUIRED)

#
# IBM ICU
#
if (WIN32)
	set(ICU_LIBRARY "C:\\dev\\icu-amd64\\lib64\\icudt.lib" "C:\\dev\\icu-amd64\\lib64\\icuin.lib" "C:\\dev\\icu-amd64\\lib64\\icuio.lib" "C:\\dev\\icu-amd64\\lib64\\icule.lib" "C:\\dev\\icu-amd64\\lib64\\iculx.lib" "C:\\dev\\icu-amd64\\lib64\\icutu.lib" "C:\\dev\\icu-amd64\\lib64\\icuuc.lib")
	set(ICU_INCLUDE "C:\\dev\\icu-amd64\\include\\")
else(WIN32)
	find_package(ICU REQUIRED) 
endif(WIN32)
#add_definitions(-DU_DISABLE_RENAMING)

#if (USE_OWN_LIBCURL)
if(WIN32)
	add_definitions(-DCURL_STATICLIB)
	set(CURL_INCLUDE_DIR "C:\\dev\\curl\\include")
#	set(CURL_LIBRARY "C:\\dev\\curl\\lib\\LIB-Release\\libcurl.lib" "wldap32.lib")
	set(CURL_LIBRARY "C:\\dev\\curl\\lib\\Release\\curllib_static.lib" "C:\\dev\\curl\\openldap.lib" "C:\\dev\\curl\\ssleay32.lib" "C:\\dev\\curl\\libeay32.lib")
else(WIN32)
	#set(CURL_INCLUDE_DIR "/opt/curl/include")
	#set(CURL_LIBRARY "/opt/curl/lib/libcurl.so")
 	find_package(CURL "7.38.0" REQUIRED)
endif(WIN32)
#else(USE_OWN_LIBCURL)
# 	find_package(CURL REQUIRED)
#endif(USE_OWN_LIBCURL)

if(WIN32)
        set(PERLLIBS_FOUND "FALSE")
        #       set(PERL_INCLUDE_PATH "C:\\strawberry\\c\\include")                                                                                   
        #       set(PERL_LIBRARY "C:\\strawberry\\perl\\bin\\perl510.dll")
else(WIN32)
        find_package(PerlLibs)
endif(WIN32)

# TODO: check that the good python version is found (the 3.2)
# We also need to check that these packages are installed:
#  * python3.2-dev
#  * libpython3.2
#  * libboost-python1.48.0
#  * libboost-python1.48-dev
set(Python_ADDITIONAL_VERSIONS 2.7)
find_package(PythonLibs)
if(DEBUG_MODE)
	set(PYTHON_LIBRARIES ${PYTHON_DEBUG_LIBRARIES})
	set(PYTHON_LIBRARY ${PYTHON_DEBUG_LIBRARIES})
	add_definitions(-DBOOST_DEBUG_PYTHON)
endif(DEBUG_MODE)
if(PYTHONLIBS_FOUND)
	add_definitions(-DENABLE_PYTHON_SUPPORT)
endif(PYTHONLIBS_FOUND)

#
# Check for X11 (used to detect caps lock activated ;-))
#
if(NOT WIN32)
	find_package(X11 REQUIRED)
endif(NOT WIN32)

if(ENABLE_CORRELATION)
	#
	# Check for Tulip 3.7 or above
	#
	# find_package(TULIP3 <VERSION> ...) does not seem to work...
	set(TULIP_REQUIRED_VERSION 3.7)
	if(WIN32)
	else(WIN32)
		find_package(TULIP3 3.7 REQUIRED)
		if(TULIP_FOUND)
			if(TULIP_VERSION STRLESS TULIP_REQUIRED_VERSION)
				message(FATAL_ERROR "Tulip ${TULIP_VERSION} is installed but ${TULIP_REQUIRED_VERSION} is required")
			else()
				message(STATUS "Tulip found: ${TULIP_VERSION}")
				message(STATUS "Tulip include dir: ${TULIP_INCLUDE_DIR}")
				add_definitions(-DENABLE_CORRELATION)
			endif()
			message(STATUS "Correlation enabled")
		else()
			message(WARNING "Tulip not found, disabling correlation")
			set(ENABLE_CORRELATION FALSE)
		endif()
	endif(WIN32)
else(ENABLE_CORRELATION)
	message(STATUS "Correlation disabled")
endif(ENABLE_CORRELATION)

find_package(HWLoc REQUIRED)
if (HWLOC_FOUND)
  include_directories(${HWLOC_INCLUDE_DIRS})
endif ()

# 
# Check for Squish 4.0
#
set(SQUISH_INSTALL_DIR /opt/squish)
find_package(Squish 4.0)
