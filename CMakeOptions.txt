#
# \file CMakeOptions.txt
#
# Copyright (C) Picviz Labs 2010-2012

# Default build type is debug
if (NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
	set(CMAKE_BUILD_TYPE "debug")
endif()

string(TOLOWER "${CMAKE_BUILD_TYPE}" CMAKE_BUILD_TYPE_LOWER)

# Arch flag
if (NOT DEFINED CMAKE_CXX_ARCH_FLAGS)

	# This value may already be defined from command line when we compile for 
	# a client architecture

	set(CMAKE_CXX_ARCH_FLAGS "-march=native")
	message(STATUS "CMAKE_CXX_ARCH_FLAGS isn't set. Flag has been guessed to ${CMAKE_CXX_ARCH_FLAGS}")
endif()

# NVCC Flags
if (NOT DEFINED CMAKE_NVCC_ARCH_FLAGS)
	# Will use "-gencode arch=compute_20,code=sm_20 -gencode
	# arch=compute_30,code=sm_30" by default, so that it will works on both
	# Fermi and Kepler GPUs. See libpvparallelview/src/CMakeLists.txt for more
	# informations.
	message(STATUS "CMAKE_NVCC_ARCH_FLAGS isn't set. Will use '-gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30' for flags with nvcc")
	set(CMAKE_NVCC_GENCODE_FLAGS "-gencode arch=compute_20,code=sm_20 -gencode arch=compute_30,code=sm_30 --compiler-bindir gcc")
else()
	# Can be specialized for client cards
	set(CMAKE_NVCC_GENCODE_FLAGS "-gencode ${CMAKE_NVCC_ARCH_FLAGS} --compiler-bindir gcc")
endif()

# Set default values for capabilities
if (NOT DEFINED USER_TARGET)
	set(USER_TARGET "developer")
endif()

# Default value for protection mode
if (CMAKE_BUILD_TYPE_LOWER STREQUAL "relprotect")
	set(PROTECT_PASS true)
endif()

# Default value for LTO
if (NOT DEFINED USE_LTO)
	# By default, not set only in release mode
	#if (CMAKE_BUILD_TYPE_LOWER STREQUAL "debug")
	#	set(USE_LTO false)
	#else()
	#	set(USE_LTO true)
	#endif()

	# AG: until this works (GCC 4.8 ?), never use LTO by default
	set(USE_LTO false)
endif()

# Default value for correlation
set(ENABLE_CORRELATION FALSE CACHE BOOLEAN "Enable the correlation system")

###############################################################################
# Defined test information (long/short, test file folder)
###############################################################################

# Default values for tests files root
if (NOT DEFINED TESTS_FILES_DIR)
	set(TESTS_FILES_DIR "${CMAKE_SOURCE_DIR}/tests/files")
endif()

# Default values for tests kind
if (DEFINED TESTS_LONG)
	add_definitions(-DTESTS_LONG)
endif()

###############################################################################
# Define customer VS developer mode capacity
###############################################################################

# Parse options
if (USER_TARGET STREQUAL "developer")
	set(PICVIZ_DEVELOPER_MODE true)
	message(STATUS "Picviz mode is developer")
	add_definitions(-DPICVIZ_DEVELOPER_MODE)
else()
	set(PICVIZ_DEVELOPER_MODE false)
	add_definitions(-DCUSTOMER_RELEASE)
	message(STATUS "Picviz mode is customer")
	if (NOT DEFINED CUSTOMER_NAME OR NOT DEFINED CUSTOMER_COMPANY OR NOT DEFINED CUSTOMER_EMAIL)
		message(FATAL_ERROR "CUSTOMER_NAME, CUSTOMER_COMPANY and CUSTOMER_EMAIL have to be defined")
	endif()
endif()

###############################################################################
# Define all variable related to custom capacity
###############################################################################

declare_customer_cap(CUSTOMER_LINESNUMBER 200000000 200000000)
declare_customer_cap(CUSTOMER_CAPABILITY_SAVE 1 0)
declare_customer_cap(CUSTOMER_CAPABILITY_IMPORT_REMOTE 1 0)
declare_customer_cap(CUSTOMER_CAPABILITY_IMPORT_DB 1 0)
declare_customer_cap(CUSTOMER_CAPABILITY_IMPORT_ELASTICSEARCH 1 0)
declare_customer_cap(CUSTOMER_CAPABILITY_IMPORT_SPLUNK 1 0)

declare_customer_cap(CUSTOMER_NAME "John Doe" "name")
declare_customer_cap(CUSTOMER_EMAIL "jdoe@acme.com" "email")
declare_customer_cap(CUSTOMER_COMPANY "ACME" "company")
declare_customer_cap(CUSTOMER_RELEASE_EXPIRATION_DATE 2147483647 0)
declare_customer_cap(CUSTOMER_CAPABILITY_MEMORY 0 0)

###############################################################################
# Show License time informations
###############################################################################

execute_process(COMMAND date +%Y-%m-%d --date "@${CUSTOMER_RELEASE_EXPIRATION_DATE}" OUTPUT_VARIABLE LICENSE_EXP_DAY OUTPUT_STRIP_TRAILING_WHITESPACE)
execute_process(COMMAND date +%Y-%m-%d --date "${LICENSE_EXP_DAY} - 1 day" OUTPUT_VARIABLE LICENSE_LAST_DAY OUTPUT_STRIP_TRAILING_WHITESPACE)
message(STATUS "License's expiration day is ${LICENSE_EXP_DAY}")
message(STATUS "License's last validity day is ${LICENSE_LAST_DAY}")

# This is a string representation to show in the help widget
declare_customer_cap(CUSTOMER_EXPIRATIONDAY "\"Unlimited\"" "\"${LICENSE_LAST_DAY}\"")

###############################################################################
# Generate customer.h/build.h
###############################################################################

set(CFG_FILE_PATH "${CMAKE_CURRENT_BINARY_DIR}/include/pvbase/customer.h")
configure_file(include/pvbase/customer.h.cmake ${CFG_FILE_PATH})
add_definitions(-DPICVIZ_CFG_FILE_PATH="${CFG_FILE_PATH}")

# Generate build.h
set(BUILD_FILE_PATH "${CMAKE_CURRENT_BINARY_DIR}/include/pvbase/build.h")
configure_file(include/pvbase/build.h.cmake ${BUILD_FILE_PATH})
add_definitions(-DPICVIZ_BUILD_FILE_PATH="${BUILD_FILE_PATH}")

###############################################################################
# Define email addresses
###############################################################################

set(EMAIL_ADDRESS_CONTACT "centralsupport@esi-group.com")
set(EMAIL_ADDRESS_SUPPORT "centralsupport@esi-group.com")

add_definitions(-DEMAIL_ADDRESS_CONTACT="${EMAIL_ADDRESS_CONTACT}")
add_definitions(-DEMAIL_ADDRESS_SUPPORT="${EMAIL_ADDRESS_SUPPORT}")
