diff --git a/include/open62541/client_highlevel.h b/include/open62541/client_highlevel.h
index 77ba54ac..cdd79267 100644
--- a/include/open62541/client_highlevel.h
+++ b/include/open62541/client_highlevel.h
@@ -250,6 +250,14 @@ UA_Client_HistoryRead_modified(UA_Client *client, const UA_NodeId *nodeId,
                                   UA_TimestampsToReturn timestampsToReturn, void *callbackContext);
 #endif // UA_ENABLE_EXPERIMENTAL_HISTORIZING
 
+#ifdef UA_ENABLE_EXPERIMENTAL_HISTORIZING
+UA_StatusCode UA_EXPORT
+UA_Client_HistoryRead_atTime(UA_Client *client, const UA_NodeId *nodeId,
+                                  const UA_HistoricalIteratorCallback callback,
+                                  UA_DateTime time, UA_String indexRange, UA_Boolean useSimpleBounds,
+                                  UA_TimestampsToReturn timestampsToReturn, void *callbackContext);
+#endif // UA_ENABLE_EXPERIMENTAL_HISTORIZING
+
 UA_StatusCode UA_EXPORT
 UA_Client_HistoryUpdate_insert(UA_Client *client,
                                const UA_NodeId *nodeId,
diff --git a/src/client/ua_client_highlevel.c b/src/client/ua_client_highlevel.c
index f605f7bf..bdca3262 100644
--- a/src/client/ua_client_highlevel.c
+++ b/src/client/ua_client_highlevel.c
@@ -474,7 +474,7 @@ __UA_Client_HistoryRead(UA_Client *client, const UA_NodeId *nodeId,
     item.nodeId = *nodeId;
     item.indexRange = indexRange;
     item.continuationPoint = continuationPoint;
-    item.dataEncoding = UA_QUALIFIEDNAME(0, "Default Binary");
+    //item.dataEncoding = UA_QUALIFIEDNAME(0, "Default Binary");
 
     UA_HistoryReadRequest request;
     UA_HistoryReadRequest_init(&request);
@@ -623,6 +623,30 @@ UA_Client_HistoryRead_modified(UA_Client *client, const UA_NodeId *nodeId,
 }
 #endif // UA_ENABLE_EXPERIMENTAL_HISTORIZING
 
+#ifdef UA_ENABLE_EXPERIMENTAL_HISTORIZING
+UA_StatusCode
+UA_Client_HistoryRead_atTime(UA_Client *client, const UA_NodeId *nodeId,
+                                  const UA_HistoricalIteratorCallback callback,
+                                  UA_DateTime time, UA_String indexRange, UA_Boolean useSimpleBounds,
+                                  UA_TimestampsToReturn timestampsToReturn, void *callbackContext) {
+
+    UA_ReadAtTimeDetails details;
+    UA_ReadAtTimeDetails_init(&details);
+    details.reqTimes = &time;
+    details.reqTimesSize = 1;
+    details.useSimpleBounds = useSimpleBounds;
+
+    UA_ExtensionObject detailsExtensionObject;
+    UA_ExtensionObject_init(&detailsExtensionObject);
+    detailsExtensionObject.content.decoded.type = &UA_TYPES[UA_TYPES_READATTIMEDETAILS];
+    detailsExtensionObject.content.decoded.data = &details;
+    detailsExtensionObject.encoding = UA_EXTENSIONOBJECT_DECODED;
+
+    return __UA_Client_HistoryRead_service(client, nodeId, callback, &detailsExtensionObject,
+                                              indexRange, timestampsToReturn, callbackContext);
+}
+#endif // UA_ENABLE_EXPERIMENTAL_HISTORIZING
+
 static UA_HistoryUpdateResponse
 __UA_Client_HistoryUpdate(UA_Client *client,
                           void *details,
