This patch adds basic support for secure connections and username password authentication to the open62541 plugin.
Inspired by an official patch https://codereview.qt-project.org/c/qt/qtopcua/+/256710/8

Supported security policies:
- Basic128Rsa15
- Basic256
- Basic256Sha256

Unsupported:
- Private keys with password
- Manual override in case of certificate verification errors
- X509 identity tokens

diff --git a/config.tests/open62541/main.cpp b/config.tests/open62541/main.cpp
index 478f54e..57a7815 100644
--- a/config.tests/open62541/main.cpp
+++ b/config.tests/open62541/main.cpp
@@ -40,7 +40,7 @@
 int main(int argc, char *argv[])
 {
     /* Create a client and connect */
-    UA_Client *client = UA_Client_new(UA_ClientConfig_default);
+    UA_Client *client = UA_Client_new();
     UA_StatusCode status = UA_Client_connect(client, "opc.tcp://localhost:4840");
     if (status != UA_STATUSCODE_GOOD) {
         UA_Client_delete(client);
diff --git a/src/opcua/client/qopcuabackend.cpp b/src/opcua/client/qopcuabackend.cpp
index aedfb55..9780901 100644
--- a/src/opcua/client/qopcuabackend.cpp
+++ b/src/opcua/client/qopcuabackend.cpp
@@ -101,6 +101,16 @@ bool QOpcUaBackend::verifyEndpointDescription(const QOpcUaEndpointDescription &e
             *message = QLatin1String("Endpoint description is invalid because endpoint URL or security policy URL is empty");
         return false;
     }
+
+    if (endpoint.securityMode() != QOpcUaEndpointDescription::MessageSecurityMode::None &&
+              endpoint.securityMode() != QOpcUaEndpointDescription::MessageSecurityMode::Sign &&
+              endpoint.securityMode() != QOpcUaEndpointDescription::MessageSecurityMode::SignAndEncrypt)
+    {
+        if (message)
+            *message = QLatin1String("Endpoint description contains an invalid message security mode");
+        return false;
+    }
+
     return true;
 }
 
diff --git a/src/plugins/opcua/open62541/qopen62541backend.cpp b/src/plugins/opcua/open62541/qopen62541backend.cpp
index 0959917..26722ed 100644
--- a/src/plugins/opcua/open62541/qopen62541backend.cpp
+++ b/src/plugins/opcua/open62541/qopen62541backend.cpp
@@ -43,6 +43,8 @@
 #include "qopcuaauthenticationinformation.h"
 #include <qopcuaerrorstate.h>
 
+#include <QtCore/QDir>
+#include <QtCore/QFile>
 #include <QtCore/qloggingcategory.h>
 #include <QtCore/qstringlist.h>
 #include <QtCore/qurl.h>
@@ -394,7 +396,7 @@ void Open62541AsyncBackend::resolveBrowsePath(quint64 handle, UA_NodeId startNod
 
 void Open62541AsyncBackend::findServers(const QUrl &url, const QStringList &localeIds, const QStringList &serverUris)
 {
-    UA_Client *tmpClient = UA_Client_new(UA_ClientConfig_default);
+    UA_Client *tmpClient = UA_Client_new();
     UaDeleter<UA_Client> clientDeleter(tmpClient, UA_Client_delete);
 
     UA_String *uaServerUris = nullptr;
@@ -779,11 +781,12 @@ void Open62541AsyncBackend::connectToEndpoint(const QOpcUaEndpointDescription &e
         return;
     }
 
-    const QString nonePolicyUri = QLatin1String("http://opcfoundation.org/UA/SecurityPolicy#None");
-
-    if (endpoint.securityPolicy() != nonePolicyUri) {
-        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "open62541 does not yet support secure connections";
-        emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::ClientError::NoError);
+    if (!m_clientImpl->supportedSecurityPolicies().contains(endpoint.securityPolicy())) {
+#ifndef UA_ENABLE_ENCRYPTION
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "The open62541 plugin has been built without encryption support";
+#endif
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Unsupported security policy:" << endpoint.securityPolicy();
+        emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::ClientError::InvalidUrl);
         return;
     }
 
@@ -791,12 +794,88 @@ void Open62541AsyncBackend::connectToEndpoint(const QOpcUaEndpointDescription &e
 
     m_useStateCallback = false;
 
-    UA_ClientConfig conf = UA_ClientConfig_default;
-    conf.clientContext = this;
-    conf.stateCallback = &clientStateCallback;
-    m_uaclient = UA_Client_new(conf);
-    UA_StatusCode ret;
+    m_uaclient = UA_Client_new();
+    auto conf = UA_Client_getConfig(m_uaclient);
+
+    const auto identity = m_clientImpl->m_client->applicationIdentity();
     const auto authInfo = m_clientImpl->m_client->authenticationInformation();
+    const auto pkiConfig = m_clientImpl->m_client->pkiConfiguration();
+
+#ifdef UA_ENABLE_ENCRYPTION
+    if (pkiConfig.isPkiValid()) {
+        UA_ByteString localCertificate;
+        UA_ByteString privateKey;
+        UA_ByteString *trustList = nullptr;
+        int trustListSize = 0;
+        UA_ByteString *revocationList = nullptr;
+        int revocationListSize = 0;
+
+        bool success = loadFileToByteString(pkiConfig.clientCertificateFile(), &localCertificate);
+
+        if (!success) {
+            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to load client certificate";
+            emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::AccessDenied);
+            return;
+        }
+
+        UaDeleter<UA_ByteString> clientCertDeleter(&localCertificate, &UA_ByteString_deleteMembers);
+
+        success = loadFileToByteString(pkiConfig.privateKeyFile(), &privateKey);
+
+        if (!success) {
+            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to load private key";
+            emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::AccessDenied);
+            return;
+        }
+
+        UaDeleter<UA_ByteString> privateKeyDeleter(&privateKey, &UA_ByteString_deleteMembers);
+
+        success = loadAllFilesInDirectory(pkiConfig.trustListDirectory(), &trustList, &trustListSize);
+
+        if (!success) {
+            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to load trust list";
+            emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::AccessDenied);
+            return;
+        }
+
+        UaArrayDeleter<UA_TYPES_BYTESTRING> trustListDeleter(trustList, trustListSize);
+
+        success = loadAllFilesInDirectory(pkiConfig.revocationListDirectory(), &revocationList, &revocationListSize);
+
+        if (!success) {
+            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to load revocation list";
+            emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::AccessDenied);
+            return;
+        }
+
+        UaArrayDeleter<UA_TYPES_BYTESTRING> revocationListDeleter(revocationList, revocationListSize);
+
+        UA_StatusCode result = UA_ClientConfig_setDefaultEncryption(conf, localCertificate, privateKey, trustList,
+                                                                    trustListSize, revocationList, revocationListSize);
+
+        if (result != UA_STATUSCODE_GOOD) {
+            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to initialize PKI:" << static_cast<QOpcUa::UaStatusCode>(result);
+            emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::AccessDenied);
+            return;
+        }
+    } else {
+#else
+    {
+#endif
+        UA_ClientConfig_setDefault(conf);
+    }
+
+    conf->clientContext = this;
+    conf->stateCallback = &clientStateCallback;
+    conf->clientDescription.applicationName = UA_LOCALIZEDTEXT_ALLOC("", identity.applicationName().toUtf8().constData());
+    conf->clientDescription.applicationUri  = UA_STRING_ALLOC(identity.applicationUri().toUtf8().constData());
+    conf->clientDescription.productUri      = UA_STRING_ALLOC(identity.productUri().toUtf8().constData());
+    conf->clientDescription.applicationType = UA_APPLICATIONTYPE_CLIENT;
+
+    conf->securityPolicyUri = UA_STRING_ALLOC(endpoint.securityPolicy().toUtf8().constData());
+    conf->securityMode = static_cast<UA_MessageSecurityMode>(endpoint.securityMode());
+
+    UA_StatusCode ret;
 
     if (authInfo.authenticationType() == QOpcUaUserTokenPolicy::TokenType::Anonymous) {
         ret = UA_Client_connect(m_uaclient, endpoint.endpointUrl().toUtf8().constData());
@@ -804,14 +883,40 @@ void Open62541AsyncBackend::connectToEndpoint(const QOpcUaEndpointDescription &e
 
         bool suitableTokenFound = false;
         for (const auto token : endpoint.userIdentityTokens()) {
-            if (token.tokenType() == QOpcUaUserTokenPolicy::Username && token.securityPolicy() == nonePolicyUri) {
+            if (token.tokenType() == QOpcUaUserTokenPolicy::Username &&
+                    m_clientImpl->supportedSecurityPolicies().contains(token.securityPolicy().isEmpty() ? endpoint.securityPolicy() : token.securityPolicy())) {
                 suitableTokenFound = true;
+
+                UA_EndpointDescription_init(&conf->endpoint);
+                UA_UserTokenPolicy_init(&conf->userTokenPolicy);
+
+                namespace vc = QOpen62541ValueConverter;
+                using namespace QOpcUa;
+                const auto endserver = endpoint.server();
+                vc::scalarFromQt(endserver.applicationUri(), &conf->endpoint.server.applicationUri);
+                vc::scalarFromQt(endserver.productUri(), &conf->endpoint.server.productUri);
+                vc::scalarFromQt(endserver.applicationName(), &conf->endpoint.server.applicationName);
+                conf->endpoint.server.applicationType = static_cast<UA_ApplicationType>(endserver.applicationType());
+                vc::scalarFromQt(endserver.gatewayServerUri(), &conf->endpoint.server.gatewayServerUri);
+                vc::scalarFromQt(endserver.discoveryProfileUri(), &conf->endpoint.server.discoveryProfileUri);
+                vc::scalarFromQt(endpoint.endpointUrl(), &conf->endpoint.endpointUrl);
+                vc::scalarFromQt(endpoint.serverCertificate(), &conf->endpoint.serverCertificate);
+                conf->endpoint.securityMode = static_cast<UA_MessageSecurityMode>(endpoint.securityMode());
+                vc::scalarFromQt(endpoint.securityPolicy(), &conf->endpoint.securityPolicyUri);
+                vc::scalarFromQt(endpoint.transportProfileUri(), &conf->endpoint.transportProfileUri);
+                conf->endpoint.securityLevel = endpoint.securityLevel();
+                vc::scalarFromQt(token.policyId(), &conf->userTokenPolicy.policyId);
+                conf->userTokenPolicy.tokenType = static_cast<UA_UserTokenType>(token.tokenType());
+                vc::scalarFromQt(token.issuedTokenType(), &conf->userTokenPolicy.issuedTokenType);
+                vc::scalarFromQt(token.issuerEndpointUrl(), &conf->userTokenPolicy.issuerEndpointUrl);
+                vc::scalarFromQt(token.securityPolicy().isEmpty() ? endpoint.securityPolicy() : token.securityPolicy(), &conf->userTokenPolicy.securityPolicyUri);
+
                 break;
             }
         }
 
         if (!suitableTokenFound) {
-            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "open62541 does not yet support encrypted passwords";
+            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "No suitable user token policy found";
             emit stateAndOrErrorChanged(QOpcUaClient::Disconnected, QOpcUaClient::ClientError::NoError);
             return;
         }
@@ -872,7 +977,8 @@ void Open62541AsyncBackend::disconnectFromEndpoint()
 
 void Open62541AsyncBackend::requestEndpoints(const QUrl &url)
 {
-    UA_Client *tmpClient = UA_Client_new(UA_ClientConfig_default);
+    UA_Client *tmpClient = UA_Client_new();
+	UA_ClientConfig_setDefault(UA_Client_getConfig(tmpClient));
     size_t numEndpoints = 0;
     UA_EndpointDescription *endpoints = nullptr;
     UA_StatusCode res = UA_Client_getEndpoints(tmpClient, url.toString(QUrl::RemoveUserInfo).toUtf8().constData(), &numEndpoints, &endpoints);
@@ -1013,6 +1119,94 @@ void Open62541AsyncBackend::cleanupSubscriptions()
     m_minPublishingInterval = 0;
 }
 
+bool Open62541AsyncBackend::loadFileToByteString(const QString &location, UA_ByteString *target) const
+{
+    if (location.isEmpty()) {
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Unable to read from empty file path";
+        return false;
+    }
+
+    if (!target) {
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "No target ByteString given";
+        return false;
+    }
+
+    UA_ByteString_init(target);
+
+    QFile file(location);
+
+    if (!file.open(QFile::ReadOnly)) {
+        qWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to open file" << location << file.errorString();
+        return false;
+    }
+
+    QByteArray data = file.readAll();
+
+    UA_ByteString temp;
+    temp.length = data.length();
+    if (data.isEmpty())
+        temp.data = nullptr;
+    else {
+        if (data.startsWith('-')) { // PEM file
+            // Remove trailing newline, mbedTLS doesn't tolerate this when loading a certificate
+            data = QString::fromLatin1(data).trimmed().toLatin1();
+        }
+        temp.data = reinterpret_cast<unsigned char *>(data.data());
+    }
+
+    bool success = UA_ByteString_copy(&temp, target);
+
+    return success == UA_STATUSCODE_GOOD;
+}
+
+bool Open62541AsyncBackend::loadAllFilesInDirectory(const QString &location, UA_ByteString **target, int *size) const
+{
+    if (location.isEmpty()) {
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Unable to read from empty file path";
+        return false;
+    }
+
+    if (!target) {
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "No target ByteString given";
+        return false;
+    }
+
+    *target = nullptr;
+    *size = 0;
+
+    QDir dir(location);
+
+    auto entries = dir.entryList(QDir::Files);
+
+    if (entries.isEmpty()) {
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Directory is empty";
+        return true;
+    }
+
+    int tempSize = entries.size();
+    UA_ByteString *list = static_cast<UA_ByteString *>(UA_Array_new(tempSize, &UA_TYPES[UA_TYPES_BYTESTRING]));
+
+    if (!list) {
+        qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to allocate memory for loading files in" << location;
+        return false;
+    }
+
+    for (int i = 0; i < entries.size(); ++i) {
+        if (!loadFileToByteString(dir.filePath(entries.at(i)), &list[i])) {
+            qCWarning(QT_OPCUA_PLUGINS_OPEN62541) << "Failed to open file" << entries.at(i);
+            UA_Array_delete(list, tempSize, &UA_TYPES[UA_TYPES_BYTESTRING]);
+            size = 0;
+            *target = nullptr;
+            return false;
+        }
+    }
+
+    *target = list;
+    *size = tempSize;
+
+    return true;
+}
+
 UA_ExtensionObject Open62541AsyncBackend::assembleNodeAttributes(const QOpcUaNodeCreationAttributes &nodeAttributes,
                                                                  QOpcUa::NodeClass nodeClass)
 {
diff --git a/src/plugins/opcua/open62541/qopen62541backend.h b/src/plugins/opcua/open62541/qopen62541backend.h
index 6073b94..c97322e 100644
--- a/src/plugins/opcua/open62541/qopen62541backend.h
+++ b/src/plugins/opcua/open62541/qopen62541backend.h
@@ -86,6 +86,10 @@ public Q_SLOTS:
     void handleSubscriptionTimeout(QOpen62541Subscription *sub, QVector<QPair<quint64, QOpcUa::NodeAttribute>> items);
     void cleanupSubscriptions();
 
+    // Helper
+    bool loadFileToByteString(const QString &location, UA_ByteString *target) const;
+    bool loadAllFilesInDirectory(const QString &location, UA_ByteString **target, int *size) const;
+
 public:
     UA_Client *m_uaclient;
     QOpen62541Client *m_clientImpl;
diff --git a/src/plugins/opcua/open62541/qopen62541client.cpp b/src/plugins/opcua/open62541/qopen62541client.cpp
index d65f737..5a7de24 100644
--- a/src/plugins/opcua/open62541/qopen62541client.cpp
+++ b/src/plugins/opcua/open62541/qopen62541client.cpp
@@ -153,7 +153,12 @@ bool QOpen62541Client::deleteReference(const QOpcUaDeleteReferenceItem &referenc
 QStringList QOpen62541Client::supportedSecurityPolicies() const
 {
     return QStringList {
-        "http://opcfoundation.org/UA/SecurityPolicy#None",
+        "http://opcfoundation.org/UA/SecurityPolicy#None"
+#ifdef UA_ENABLE_ENCRYPTION
+        , "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15"
+        , "http://opcfoundation.org/UA/SecurityPolicy#Basic256"
+        , "http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256"
+#endif
     };
 }
 
diff --git a/src/plugins/opcua/open62541/qopen62541subscription.cpp b/src/plugins/opcua/open62541/qopen62541subscription.cpp
index c19f798..78a9f5d 100644
--- a/src/plugins/opcua/open62541/qopen62541subscription.cpp
+++ b/src/plugins/opcua/open62541/qopen62541subscription.cpp
@@ -94,8 +94,8 @@ QOpen62541Subscription::QOpen62541Subscription(Open62541AsyncBackend *backend, c
     : m_backend(backend)
     , m_interval(settings.publishingInterval())
     , m_subscriptionId(0)
-    , m_lifetimeCount(settings.lifetimeCount() ? settings.lifetimeCount() : UA_SubscriptionSettings_default.requestedLifetimeCount)
-    , m_maxKeepaliveCount(settings.maxKeepAliveCount() ? settings.maxKeepAliveCount() : UA_SubscriptionSettings_default.requestedMaxKeepAliveCount)
+    , m_lifetimeCount(settings.lifetimeCount())
+    , m_maxKeepaliveCount(settings.maxKeepAliveCount())
     , m_shared(settings.subscriptionType())
     , m_priority(settings.priority())
     , m_maxNotificationsPerPublish(settings.maxNotificationsPerPublish())
diff --git a/tests/auto/declarative/SecurityTest.qml b/tests/auto/declarative/SecurityTest.qml
index 2e63e17..2902dd2 100644
--- a/tests/auto/declarative/SecurityTest.qml
+++ b/tests/auto/declarative/SecurityTest.qml
@@ -65,7 +65,10 @@ Item {
                 compare(connection2.supportedSecurityPolicies.length, 6);
                 compare(connection2.supportedUserTokenTypes.length, 3);
             } else if (backendName === "open62541") {
-                compare(connection2.supportedSecurityPolicies.length, 1);
+                if (SERVER_SUPPORTS_SECURITY)
+                    compare(connection2.supportedSecurityPolicies.length, 4);
+                else
+                    compare(connection2.supportedSecurityPolicies.length, 1);
                 compare(connection2.supportedUserTokenTypes.length, 2);
             } else {
                 fail(backendName, "is not support by this test case");
diff --git a/tests/auto/security/tst_security.cpp b/tests/auto/security/tst_security.cpp
index 9460e46..48324ba 100644
--- a/tests/auto/security/tst_security.cpp
+++ b/tests/auto/security/tst_security.cpp
@@ -262,9 +262,6 @@ void Tst_QOpcUaSecurity::connectAndDisconnectUsingCertificate()
     QScopedPointer<QOpcUaClient> client(m_opcUa.createClient(backend));
     QVERIFY2(client, QString("Loading backend failed: %1").arg(backend).toLatin1().data());
 
-    if (!client->supportedUserTokenTypes().contains(QOpcUaUserTokenPolicy::TokenType::Certificate))
-        QSKIP(QString("This test is skipped because backend %1 does not support certificate authentication").arg(client->backend()).toLatin1().constData());
-
     const QString pkidir = m_pkiData->path();
     QOpcUaPkiConfiguration pkiConfig;
     pkiConfig.setClientCertificateFile(pkidir + "/own/certs/tst_security.der");
@@ -276,8 +273,10 @@ void Tst_QOpcUaSecurity::connectAndDisconnectUsingCertificate()
 
     const auto identity = pkiConfig.applicationIdentity();
     QOpcUaAuthenticationInformation authInfo;
-    authInfo.setCertificateAuthentication();
-
+    if (client->supportedUserTokenTypes().contains(QOpcUaUserTokenPolicy::TokenType::Certificate))
+        authInfo.setCertificateAuthentication();
+    else
+        authInfo.setAnonymousAuthentication();
     client->setAuthenticationInformation(authInfo);
     client->setApplicationIdentity(identity);
     client->setPkiConfiguration(pkiConfig);
