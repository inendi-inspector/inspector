/*
 * $Id: PVNormalizer.cpp 3221 2011-06-30 11:45:19Z aguinet $
 * Copyright (C) Sebastien Tricaud 2010-2011
 * Copyright (C) Philippe Saade 2010-2011
 * 
 */

#include <QLibrary>
#include <QList>
#include <QString>
#include <QStringList>
#include <QRegExp>
#include <QHashIterator>
#include <QHash>
#include <QDir>


#include <stdlib.h>

#include <pvcore/general.h>
#include <pvcore/debug.h>

#include <pvrush/PVNormalizer.h>

/******************************************************************************
 *
 * PVRush::normalize_get_plugins_dirs
 *
 *****************************************************************************/
QStringList PVRush::normalize_get_plugins_dirs()
{
	QString pluginsdirs;
	QStringList pluginsdirs_list; 

	pluginsdirs = QString(getenv("PVRUSH_NORMALIZE_DIR"));
	if (pluginsdirs.isEmpty()) {
		pluginsdirs = QString(PVRUSH_NORMALIZE_DIR);
	}

	pluginsdirs_list = pluginsdirs.split(PVCORE_DIRECTORY_SEP);
	
	return pluginsdirs_list;
}

/******************************************************************************
 *
 * PVRush::normalize_get_helpers_plugins_dirs
 *
 *****************************************************************************/
QStringList PVRush::normalize_get_helpers_plugins_dirs(QString helper)
{
	QString pluginsdirs; 
	QStringList pluginsdirs_list;
	QDir dir;
	int counter;


	pluginsdirs = QString(getenv("PVRUSH_NORMALIZE_HELPERS_DIR"));
	if (pluginsdirs.isEmpty()) {
		pluginsdirs = QString(PVRUSH_NORMALIZE_HELPERS_DIR); /* Variable generated by CMAKE */
	}

	pluginsdirs_list = pluginsdirs.split(PVCORE_DIRECTORY_SEP);
	for (counter=0; counter < pluginsdirs_list.count(); counter++) {
		pluginsdirs_list[counter] = pluginsdirs_list[counter] + dir.separator() + helper + dir.separator();
	}

	return pluginsdirs_list;
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::PVNormalizer
 *
 *****************************************************************************/
PVRush::PVNormalizer::PVNormalizer()
{
	this->plugins_register_all();
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::~PVNormalizer
 *
 *****************************************************************************/
PVRush::PVNormalizer::~PVNormalizer()
{
	QHashIterator<QString, PVRush::NormalizeFunctions> hash(functions);
	PVRush::NormalizeFunctions nfunctions;

	while (hash.hasNext()) {
		hash.next();
		nfunctions = functions[hash.key()];
		nfunctions.terminate_function();
		delete functions[hash.key()].lib;
	}

}

/******************************************************************************
 *
 * PVRush::PVNormalizer::plugins_register_one
 *
 *****************************************************************************/
int PVRush::PVNormalizer::plugins_register_one(QString filename)
{
	QString plugin_name(filename);
	PVRush::NormalizeFunctions nfunctions;


	nfunctions.lib = new QLibrary(filename);

	PVLOG_INFO("Loading normalization plugin: %s\n", filename.toUtf8().data());

	nfunctions.init_function = (normalize_init_function) nfunctions.lib->resolve(normalize_init_string);
	if (!nfunctions.init_function) {
	  PVLOG_ERROR("Error: %s\n", 
		        nfunctions.lib->errorString().toUtf8().data());
	  return -1;
	}
	nfunctions.init_function();

	nfunctions.file_function = (normalize_file_function) nfunctions.lib->resolve(normalize_file_string);
	if (!nfunctions.file_function) {
	  PVLOG_ERROR("Error: %s\n", 
		        nfunctions.lib->errorString().toUtf8().data());
	  return -1;
	}

	nfunctions.buffer_function = (normalize_buffer_function) nfunctions.lib->resolve(normalize_buffer_string);
	if (!nfunctions.buffer_function) {
	  PVLOG_ERROR("Error: %s\n", 
		        nfunctions.lib->errorString().toUtf8().data());
	  return -1;
	}

	nfunctions.get_format_function = (normalize_get_format_function) nfunctions.lib->resolve(normalize_get_format_string);
	if (!nfunctions.get_format_function) {
	  PVLOG_ERROR("Error: %s\n", 
		        nfunctions.lib->errorString().toUtf8().data());
	  return -1;
	}

	nfunctions.terminate_function = (normalize_terminate_function) nfunctions.lib->resolve(normalize_terminate_string);
	if (!nfunctions.terminate_function) {
	  PVLOG_ERROR("Error: %s\n", 
		        nfunctions.lib->errorString().toUtf8().data());
	  return -1;
	}

	nfunctions.discovery_function = (normalize_discovery_function) nfunctions.lib->resolve(normalize_discovery_string);
	if (!nfunctions.discovery_function) {
	  PVLOG_ERROR("Error: %s\n", 
		        nfunctions.lib->errorString().toUtf8().data());
	  return -1;
	}

	nfunctions.list_function = (normalize_list_function) nfunctions.lib->resolve(normalize_list_string);
	if (!nfunctions.list_function) {
	  PVLOG_ERROR("Error: %s\n", 
		        nfunctions.lib->errorString().toUtf8().data());
	  return -1;
	}

	// From '/foo/bar/libnormalize_pcre.so' to 'pcre'
	plugin_name = plugin_name.section('/', -1);

#ifdef WIN32
	plugin_name.replace(QString("normalize_"), QString(""));
	plugin_name.remove(QRegExp("\\.dll$"));
#else
	plugin_name.replace(QString("libnormalize_"), QString(""));
	plugin_name.remove(QRegExp("\\.so$"));
#endif

	functions[plugin_name] = nfunctions;

	return 0;
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::plugins_register_all
 *
 *****************************************************************************/
int PVRush::PVNormalizer::plugins_register_all()
{
	QDir dir;
	QStringList pluginsdirs;
	QStringList filters;
	QStringList files;
	int counter;

	pluginsdirs = normalize_get_plugins_dirs();

	for (counter=0; counter < pluginsdirs.count(); counter++) {
		dir = QDir(pluginsdirs[counter]);
		//	dir.separator()
		PVLOG_INFO("Reading normalize plugins directory: %s\n", pluginsdirs[counter].toUtf8().data());

#ifdef WIN32
		filters << "*normalize_*.dll";
#else
		filters << "*normalize_*.so";
#endif
		dir.setNameFilters(filters);

		files = dir.entryList();
		QStringListIterator filesIterator(files);
		while (filesIterator.hasNext()) {
			plugins_register_one(dir.absoluteFilePath(filesIterator.next()));
		}
	}

	return 0;
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::discover
 *
 *****************************************************************************/
QStringList PVRush::PVNormalizer::discover(QString filename)
{
	QHashIterator<QString, PVRush::NormalizeFunctions> hash(functions);
	PVRush::NormalizeFunctions nfunctions;
	QStringList list;

	while (hash.hasNext()) {
		hash.next();
		nfunctions = functions[hash.key()];
		//		PVCore::log("Discovery for plugin %s\n", hash.key().toUtf8().data());
		nfunctions.discovery_function(filename, &list);
	}

	return list;
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::plugins_list_all
 *
 *****************************************************************************/
QStringList PVRush::PVNormalizer::plugins_list_all(void)
{
	QHashIterator<QString, PVRush::NormalizeFunctions> hash(functions);
	PVRush::NormalizeFunctions nfunctions;
	QStringList list;

	list.append("automatic");

	while (hash.hasNext()) {
		hash.next();
		nfunctions = functions[hash.key()];
		nfunctions.list_function(&list);
		// tmp_list << nfunctions.list_function();
		// if (tmp_list.isEmpty()) {
		// 	list << hash.key();
		// } else {
		// 	list << tmp_list;
		// }
	}

	return list;
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::normalize
 *
 *****************************************************************************/
PVRush::PVNraw *PVRush::PVNormalizer::normalize(QString type, QString filename)
{
	// AG: deprecated
#if 0
	PVRush::PVNraw *nraw = new PVRush::PVNraw();
	QStringList plugin;
	QHash<QString, QString> logopt;
	QFile rfile(filename);

	// We need to clear our table + format in case we previously had data
	// format->clear();
	// qt_nraw.clear();

	if (!rfile.exists()) {
		PVLOG_ERROR("No such file '%s'\n", filename.toUtf8().data());
		return nraw;
		// return qt_nraw;
	}

	plugin = type.split(':');

	if (!functions.contains(plugin.at(0))) {
		PVLOG_ERROR("No such normalize plugin '%s'\n", plugin.at(0).toUtf8().data());
		return nraw;
	}

	if (plugin.count() > 1) {
		QString format_file;

		logopt["helper"] = plugin.at(1);
		functions[plugin.at(0)].get_format_function(filename, logopt, nraw->format);
		//nraw->table = functions[plugin.at(0)].file_function(nraw->format, filename, logopt);
	} else {
		functions[plugin.at(0)].get_format_function(filename, logopt, nraw->format);
		//nraw->table = functions[plugin.at(0)].file_function(nraw->format, filename, logopt);
	}

	if (!nraw->table.size() == 0) {
		QStringList in_nraw_line0 = nraw->table.at(0);
		if (in_nraw_line0.count() < 2) {
			PVLOG_ERROR("We could normalize file '%s' with plugin '%s'; However there is only one column. So there was a normalization issue! Clearing nraw.\n", filename.toUtf8().data(), plugin.at(0).toUtf8().data());
			nraw->table.clear();
			return nraw;
		}
	}
#endif
	assert(false);

	return NULL;
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::normalized_debug
 *
 *****************************************************************************/
void PVRush::PVNormalizer::normalized_debug(QVector<QStringList> qt_nraw)
{
  int i;

  for (i = 0; i < qt_nraw.size(); ++i) {
  	QStringList slist = qt_nraw.at(i);
	debug_qstringlist(slist);
  }
}

/******************************************************************************
 *
 * PVRush::PVNormalizer::normalized_get_data
 *
 *****************************************************************************/
QString PVRush::PVNormalizer::normalized_get_data(QVector<QStringList> qt_nraw, PVRow i, PVCol j)
{
	QStringList slist;

	if (i > (unsigned int)qt_nraw.size()) {
		PVLOG_ERROR("Error: the index '%d' is greater than our raw table size '%d'\n", i, qt_nraw.size());
		return QString("");
	}

	slist = qt_nraw.at(i);
	return slist.at(j);
}

