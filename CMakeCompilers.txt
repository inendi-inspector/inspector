#
# @file
#
# @copyright (C) Picviz Labs 2012-March 2015
# @copyright (C) ESI Group INENDI April 2015-2015

set(CMAKE_CONFIGURATION_TYPES debug release relwithdebinfo calltrace distrib)

# Use ccache if installed
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
    message(STATUS "Compilation will be done with CCache")
endif(CCACHE_FOUND)

MESSAGE(STATUS "Build type is ${CMAKE_BUILD_TYPE}")

set(CMAKE_CXX_COMMON_FLAGS "-std=c++11 -Wall -Wextra -Wno-unused-local-typedefs")
set(LD_IS_GOLD_USED FALSE)

if (USE_LTO)
	if (CMAKE_COMPILER_IS_GNUCC)
		set(LTO_CXX_FLAGS "-flto")
		set(LTO_LINK_FLAGS "-flto")

		GET_GCC_VERSION(GCC_MAJOR GCC_MINOR)
		message(STATUS "LTO will be used with GCC version ${GCC_MAJOR}.${GCC_MINOR}")
		if ((${GCC_MAJOR} LESS 5) AND (${GCC_MINOR} LESS 8))
			# Gold needs to be used for LTO to work. Let's try if we find it !
			find_program(GOLD_EXE gold)
			if (GOLD_EXE-NOTFOUND)
				message(FATAL "LTO can't be used without the gold linker and current GCC version (${GCC_MAJOR}.${GCC_MINOR})")
			endif()
			# Gold found, let's make a symlink for ld to it and use it
			set(GOLD_BIN_DIR "${CMAKE_BINARY_DIR}/bin/gold/")
			file(MAKE_DIRECTORY "${GOLD_BIN_DIR}")
			execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink "${GOLD_EXE}" "${GOLD_BIN_DIR}/ld")
			
			# "-lrt" needs to be add since GNU ld does it by default, but not GNU gold!
			set(LTO_LINK_FLAGS "${LTO_LINK_FLAGS} -B${GOLD_BIN_DIR} -Wl,--threads -lrt")
			set(LD_IS_GOLD_USED TRUE)
			
			message(STATUS "GNU gold is used for LTO and linking")
		endif()
	endif()
else()
	message(STATUS "LTO won't be used.")
	set(LTO_CXX_FLAGS "")
	set(LTO_LINK_FLAGS "")
endif()

set(CMAKE_CXX_COMMON_FLAGS "${CMAKE_CXX_COMMON_FLAGS} ${LTO_CXX_FLAGS}")

set(CMAKE_CXX_FLAGS_DEBUG "-ggdb ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_DEBUG ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG ${LTO_LINK_FLAGS})

set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -DNDEBUG ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_RELEASE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_RELEASE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE ${LTO_LINK_FLAGS})

set(CMAKE_CXX_FLAGS_DISTRIB "-Ofast -ggdb -DNDEBUG ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_DISTRIB ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_DISTRIB ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_DISTRIB ${LTO_LINK_FLAGS})

set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-Ofast -ggdb -DNDEBUG ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ${LTO_LINK_FLAGS})

# due to a GCC problem, instrinsics must be exluded from instrumentation
# http://nic.uoregon.edu/pipermail/tau-users/2012-September/000713.htm
# http://nic.uoregon.edu/pipermail/tau-users/2012-September/000717.html
set(CMAKE_CXX_FLAGS_CALLTRACE "-ggdb -finstrument-functions -finstrument-functions-exclude-file-list=intrin,include/c++,include/tbb,include/boost ${CMAKE_CXX_ARCH_FLAGS} ${CMAKE_CXX_COMMON_FLAGS}")
list(APPEND CMAKE_SHARED_LINKER_FLAGS_CALLTRACE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_MODULE_LINKER_FLAGS_CALLTRACE ${LTO_LINK_FLAGS})
list(APPEND CMAKE_EXE_LINKER_FLAGS_CALLTRACE ${LTO_LINK_FLAGS})
